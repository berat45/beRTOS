
BeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08001798  08001798  00011798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018dc  080018dc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080018dc  080018dc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018dc  080018dc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018dc  080018dc  000118dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018e0  080018e0  000118e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080018e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000044  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bd6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003da  00000000  00000000  00020c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00021058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000158  00000000  00000000  000211e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b34  00000000  00000000  00021340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000155b  00000000  00000000  00023e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000098c1  00000000  00000000  000253cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002ec90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d44  00000000  00000000  0002ece0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001780 	.word	0x08001780

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08001780 	.word	0x08001780

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <UserTask_1>:

/********************************************************************************/
/***************************** FUNCTION IMPLEMENTATIONS *************************/
/********************************************************************************/
void UserTask_1(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	while(SYSTEM_STATE_TRUE)
	{
		printf("User task 1 is working..!");
 8000294:	4801      	ldr	r0, [pc, #4]	; (800029c <UserTask_1+0xc>)
 8000296:	f000 fa6f 	bl	8000778 <iprintf>
 800029a:	e7fb      	b.n	8000294 <UserTask_1+0x4>
 800029c:	08001798 	.word	0x08001798

080002a0 <UserTask_2>:
	}
}
void UserTask_2(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	while(SYSTEM_STATE_TRUE)
	{
		printf("User task 2 is working..!");
 80002a4:	4801      	ldr	r0, [pc, #4]	; (80002ac <UserTask_2+0xc>)
 80002a6:	f000 fa67 	bl	8000778 <iprintf>
 80002aa:	e7fb      	b.n	80002a4 <UserTask_2+0x4>
 80002ac:	080017b4 	.word	0x080017b4

080002b0 <UserTask_3>:
	}
}
void UserTask_3(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	while(SYSTEM_STATE_TRUE)
	{
		printf("User task 3 is working..!");
 80002b4:	4801      	ldr	r0, [pc, #4]	; (80002bc <UserTask_3+0xc>)
 80002b6:	f000 fa5f 	bl	8000778 <iprintf>
 80002ba:	e7fb      	b.n	80002b4 <UserTask_3+0x4>
 80002bc:	080017d0 	.word	0x080017d0

080002c0 <UserTask_4>:
	}
}
void UserTask_4(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	while(SYSTEM_STATE_TRUE)
	{
		printf("User task 4 is working..!");
 80002c4:	4801      	ldr	r0, [pc, #4]	; (80002cc <UserTask_4+0xc>)
 80002c6:	f000 fa57 	bl	8000778 <iprintf>
 80002ca:	e7fb      	b.n	80002c4 <UserTask_4+0x4>
 80002cc:	080017ec 	.word	0x080017ec

080002d0 <initializeSystickTimer>:
	}
}

void initializeSystickTimer(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
	uint32_t *pSRVR   = (uint32_t*)0xE000E014; /* SysTick Reload Value Register */
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <initializeSystickTimer+0x58>)
 80002d8:	60fb      	str	r3, [r7, #12]
	uint32_t *pSCSR   = (uint32_t*)0xE000E010; /* SysTick Control and Status Register */
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <initializeSystickTimer+0x5c>)
 80002dc:	60bb      	str	r3, [r7, #8]
	uint32_t  counter = TIMER_DESIRED_FREQ - 1; /* Reload will create exception */
 80002de:	f240 33e7 	movw	r3, #999	; 0x3e7
 80002e2:	607b      	str	r3, [r7, #4]

	/* Clear the value of reload register */
	TIMER_CLEAR_32BIT_REG(pSRVR);
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]

	/* Load the counter into SVR */
	*pSRVR |= counter;
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	431a      	orrs	r2, r3
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	601a      	str	r2, [r3, #0]

	/* Counter settings */
	TIMER_ENABLE_SYSTICK_EXC(pSCSR);
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f043 0202 	orr.w	r2, r3, #2
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	601a      	str	r2, [r3, #0]
	TIMER_INDC_CLOCK_SOURCE(pSCSR);
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f043 0204 	orr.w	r2, r3, #4
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	601a      	str	r2, [r3, #0]
	TIMER_ENABLE_SYSTICK_CTR(pSCSR);
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f043 0201 	orr.w	r2, r3, #1
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	3714      	adds	r7, #20
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	e000e014 	.word	0xe000e014
 800032c:	e000e010 	.word	0xe000e010

08000330 <initializeStackOfSchedulerTask>:

__attribute__((naked)) void initializeStackOfSchedulerTask(uint32_t SchedulerStackEndAddr)
{
 8000330:	4603      	mov	r3, r0
	/* Move stack value from general register (or from a variable in C as I amm doing) to special register */
	__asm volatile("MSR MSP, %0": : "r" (SchedulerStackEndAddr) : );
 8000332:	f383 8808 	msr	MSP, r3

	/* Return from function call */
	__asm volatile ("BX LR");
 8000336:	4770      	bx	lr
}
 8000338:	bf00      	nop
	...

0800033c <initializeStackOfUserTasks>:

void initializeStackOfUserTasks(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
	SYSTEM_DEFINITIONS_NUM_OF_TASKS_ENUM  stackFrame1Counter;
	uint8_t  stackFrame2Counter;
	const uint8_t stackFrame2Registers = 13; /* R0 to R12 */
 8000342:	230d      	movs	r3, #13
 8000344:	71fb      	strb	r3, [r7, #7]
	uint32_t *pPSP;

	/* Null PSP at start */
	pPSP = NULL;
 8000346:	2300      	movs	r3, #0
 8000348:	60bb      	str	r3, [r7, #8]

	/* Start from high end address (task 1) and go through the low end address, according to the stack structure
	 * (systemDefinitions.h), fill the user stack accordingly */
	for(stackFrame1Counter = TASK_1; stackFrame1Counter < TASK_TOTAL_NUM_OF_TASKS; ++stackFrame1Counter)
 800034a:	2300      	movs	r3, #0
 800034c:	73fb      	strb	r3, [r7, #15]
 800034e:	e033      	b.n	80003b8 <initializeStackOfUserTasks+0x7c>
	{
		pPSP = (uint32_t*)UserTasksPspArray[stackFrame1Counter];
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	4a1e      	ldr	r2, [pc, #120]	; (80003cc <initializeStackOfUserTasks+0x90>)
 8000354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000358:	60bb      	str	r3, [r7, #8]

		/* Relocate PSP and process xPSR */
		pPSP--;
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	3b04      	subs	r3, #4
 800035e:	60bb      	str	r3, [r7, #8]
		*pPSP = STACK_INITIAL_XPSR_VALUE;
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000366:	601a      	str	r2, [r3, #0]

		/* Relocate PSP and process PC */
		pPSP--;
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	3b04      	subs	r3, #4
 800036c:	60bb      	str	r3, [r7, #8]
		*pPSP = UserTasksAddresses[stackFrame1Counter];
 800036e:	7bfb      	ldrb	r3, [r7, #15]
 8000370:	4a17      	ldr	r2, [pc, #92]	; (80003d0 <initializeStackOfUserTasks+0x94>)
 8000372:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	601a      	str	r2, [r3, #0]

		/* Relocate PSP and process LR */
		pPSP--;
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	3b04      	subs	r3, #4
 800037e:	60bb      	str	r3, [r7, #8]
		*pPSP = STACK_INITIAL_LR_VALUE;
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

		for(stackFrame2Counter = 0; stackFrame2Counter < stackFrame2Registers; ++stackFrame2Counter)
 8000388:	2300      	movs	r3, #0
 800038a:	73bb      	strb	r3, [r7, #14]
 800038c:	e008      	b.n	80003a0 <initializeStackOfUserTasks+0x64>
		{
			pPSP--;
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	3b04      	subs	r3, #4
 8000392:	60bb      	str	r3, [r7, #8]
			*pPSP = 0;
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
		for(stackFrame2Counter = 0; stackFrame2Counter < stackFrame2Registers; ++stackFrame2Counter)
 800039a:	7bbb      	ldrb	r3, [r7, #14]
 800039c:	3301      	adds	r3, #1
 800039e:	73bb      	strb	r3, [r7, #14]
 80003a0:	7bba      	ldrb	r2, [r7, #14]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d3f2      	bcc.n	800038e <initializeStackOfUserTasks+0x52>
		}

		/* Preserve the value of PSP */
		UserTasksPspArray[stackFrame1Counter] = (uint32_t)pPSP;
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	68ba      	ldr	r2, [r7, #8]
 80003ac:	4907      	ldr	r1, [pc, #28]	; (80003cc <initializeStackOfUserTasks+0x90>)
 80003ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(stackFrame1Counter = TASK_1; stackFrame1Counter < TASK_TOTAL_NUM_OF_TASKS; ++stackFrame1Counter)
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	3301      	adds	r3, #1
 80003b6:	73fb      	strb	r3, [r7, #15]
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	d9c8      	bls.n	8000350 <initializeStackOfUserTasks+0x14>
	}
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	3714      	adds	r7, #20
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	20000000 	.word	0x20000000
 80003d0:	20000090 	.word	0x20000090

080003d4 <DetermineNextTask>:

void DetermineNextTask(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	switch (currentlyActiveTask)
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <DetermineNextTask+0x50>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d81b      	bhi.n	8000418 <DetermineNextTask+0x44>
 80003e0:	a201      	add	r2, pc, #4	; (adr r2, 80003e8 <DetermineNextTask+0x14>)
 80003e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e6:	bf00      	nop
 80003e8:	080003f9 	.word	0x080003f9
 80003ec:	08000401 	.word	0x08000401
 80003f0:	08000409 	.word	0x08000409
 80003f4:	08000411 	.word	0x08000411
	{
		case TASK_1:
		{
			currentlyActiveTask = TASK_2;
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <DetermineNextTask+0x50>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	701a      	strb	r2, [r3, #0]
			break;
 80003fe:	e00c      	b.n	800041a <DetermineNextTask+0x46>
		}
		case TASK_2:
		{
			currentlyActiveTask = TASK_3;
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <DetermineNextTask+0x50>)
 8000402:	2202      	movs	r2, #2
 8000404:	701a      	strb	r2, [r3, #0]
			break;
 8000406:	e008      	b.n	800041a <DetermineNextTask+0x46>
		}
		case TASK_3:
		{
			currentlyActiveTask = TASK_4;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <DetermineNextTask+0x50>)
 800040a:	2203      	movs	r2, #3
 800040c:	701a      	strb	r2, [r3, #0]
			break;
 800040e:	e004      	b.n	800041a <DetermineNextTask+0x46>
		}
		case TASK_4:
		{
			currentlyActiveTask = TASK_1;
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <DetermineNextTask+0x50>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
			break;
 8000416:	e000      	b.n	800041a <DetermineNextTask+0x46>
		}
		default:
		{
			break;
 8000418:	bf00      	nop
		}
	}
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	200000a0 	.word	0x200000a0

08000428 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
	uint32_t* const pSHCSR = (uint32_t*)0xE000ED24;
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <enable_processor_faults+0x3c>)
 8000430:	607b      	str	r3, [r7, #4]

	/* Mem manage */
	*pSHCSR |= (1 << 16);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	601a      	str	r2, [r3, #0]
	/* Bus fault */
	*pSHCSR |= (1 << 17);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	601a      	str	r2, [r3, #0]
	/* Usage fault */
	*pSHCSR |= (1 << 18);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	601a      	str	r2, [r3, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000ed24 	.word	0xe000ed24

08000468 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	printf("HardFault_Handler()\n");
 800046c:	4801      	ldr	r0, [pc, #4]	; (8000474 <HardFault_Handler+0xc>)
 800046e:	f000 fa09 	bl	8000884 <puts>
	while(1);
 8000472:	e7fe      	b.n	8000472 <HardFault_Handler+0xa>
 8000474:	08001808 	.word	0x08001808

08000478 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	printf("MemManage_Handler()\n");
 800047c:	4801      	ldr	r0, [pc, #4]	; (8000484 <MemManage_Handler+0xc>)
 800047e:	f000 fa01 	bl	8000884 <puts>
	while(1);
 8000482:	e7fe      	b.n	8000482 <MemManage_Handler+0xa>
 8000484:	0800181c 	.word	0x0800181c

08000488 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	printf("BusFault_Handler()\n");
 800048c:	4801      	ldr	r0, [pc, #4]	; (8000494 <BusFault_Handler+0xc>)
 800048e:	f000 f9f9 	bl	8000884 <puts>
	while(1);
 8000492:	e7fe      	b.n	8000492 <BusFault_Handler+0xa>
 8000494:	08001830 	.word	0x08001830

08000498 <setPspCurrentVaue>:
}

void setPspCurrentVaue(uint32_t currentPsp)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	UserTasksPspArray[currentlyActiveTask] = currentPsp;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <setPspCurrentVaue+0x24>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4619      	mov	r1, r3
 80004a6:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <setPspCurrentVaue+0x28>)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	200000a0 	.word	0x200000a0
 80004c0:	20000000 	.word	0x20000000

080004c4 <getPspOfCurrentTask>:

uint32_t getPspOfCurrentTask(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	return UserTasksPspArray[currentlyActiveTask];
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <getPspOfCurrentTask+0x1c>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <getPspOfCurrentTask+0x20>)
 80004d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	200000a0 	.word	0x200000a0
 80004e4:	20000000 	.word	0x20000000

080004e8 <SysTick_Handler>:
/* Systick timer handler; do the main scheduling operation */
__attribute__ ((naked)) void SysTick_Handler(void)
{
	/* Save the context of the current task */
		/* Get the PSP value of the currently RUNNING task */
	__asm volatile ("MRS R0,PSP");
 80004e8:	f3ef 8009 	mrs	r0, PSP
		/* Using PSP, store SF2 (R4 - R11) */
	__asm volatile ("STMDB R0!,{R4-R11}");
 80004ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile ("PUSH {LR}");
 80004f0:	b500      	push	{lr}
		/* Save the current value of PSP , R0 --> currentPsp */
	__asm volatile ("BL setPspCurrentVaue");
 80004f2:	f7ff ffd1 	bl	8000498 <setPspCurrentVaue>

	/* Retrieve the context of the next task */
		/* Determine the next task - Linking */
	__asm volatile ("BL DetermineNextTask");
 80004f6:	f7ff ff6d 	bl	80003d4 <DetermineNextTask>
		/* Get the PSP value of this task */
	__asm volatile ("BL getPspOfCurrentTask");
 80004fa:	f7ff ffe3 	bl	80004c4 <getPspOfCurrentTask>
		/* Retrieve SF2 of the current task which is the switched one */
	__asm volatile ("LDMIA R0!,{R4-R11}");
 80004fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
		/* Update PSP and time to exit */
	__asm volatile ("MSR PSP,R0");
 8000502:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}");
 8000506:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile ("BX LR");
 800050a:	4770      	bx	lr

}
 800050c:	bf00      	nop

0800050e <switchSpToPsp>:

__attribute__ ((naked)) void switchSpToPsp(void)
{
	/* Initialize the PSP with TASK1 (current task, task1 is the default one) stack start address */
		/* Save LR before corruption which connects back to main */
	__asm volatile ("PUSH {LR}");
 800050e:	b500      	push	{lr}

		/* Take UserTasksPspArray[currentlyActiveTask] into R0 */
	__asm volatile ("BL getPspOfCurrentTask");
 8000510:	f7ff ffd8 	bl	80004c4 <getPspOfCurrentTask>

		/* Set PSP */
	__asm volatile ("MSR PSP,R0");
 8000514:	f380 8809 	msr	PSP, r0

		/* Store LR back */
	__asm volatile ("POP {LR}");
 8000518:	f85d eb04 	ldr.w	lr, [sp], #4

	/* Change SP to PSP via the Control register*/
	__asm volatile ("MOV R0, #0X02");
 800051c:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 8000520:	f380 8814 	msr	CONTROL, r0

	/* Back to main() */
	__asm volatile ("BX LR");
 8000524:	4770      	bx	lr
}
 8000526:	bf00      	nop

08000528 <main>:

int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	enable_processor_faults();
 800052c:	f7ff ff7c 	bl	8000428 <enable_processor_faults>

	/* Initialize private stack of scheduler task */
	initializeStackOfSchedulerTask(STACK_TS_SS);
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <main+0x38>)
 8000532:	f7ff fefd 	bl	8000330 <initializeStackOfSchedulerTask>

	/* Initialize user tasks address array */
	UserTasksAddresses[TASK_1] = (uint32_t)UserTask_1;
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <main+0x3c>)
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <main+0x40>)
 800053a:	601a      	str	r2, [r3, #0]
	UserTasksAddresses[TASK_2] = (uint32_t)UserTask_2;
 800053c:	4a0b      	ldr	r2, [pc, #44]	; (800056c <main+0x44>)
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <main+0x40>)
 8000540:	605a      	str	r2, [r3, #4]
	UserTasksAddresses[TASK_3] = (uint32_t)UserTask_3;
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x48>)
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <main+0x40>)
 8000546:	609a      	str	r2, [r3, #8]
	UserTasksAddresses[TASK_4] = (uint32_t)UserTask_4;
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <main+0x4c>)
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <main+0x40>)
 800054c:	60da      	str	r2, [r3, #12]

	/* Initialize private stack of user tasks */
	initializeStackOfUserTasks();
 800054e:	f7ff fef5 	bl	800033c <initializeStackOfUserTasks>

    /* Initialize SysTick timer */
	initializeSystickTimer();
 8000552:	f7ff febd 	bl	80002d0 <initializeSystickTimer>

	/* Switch Stack Pointer to PSP for user thread runs */
	switchSpToPsp();
 8000556:	f7ff ffda 	bl	800050e <switchSpToPsp>

	/* Start the first task */
	UserTask_1();
 800055a:	f7ff fe99 	bl	8000290 <UserTask_1>

	for(;;);
 800055e:	e7fe      	b.n	800055e <main+0x36>
 8000560:	2001f000 	.word	0x2001f000
 8000564:	08000291 	.word	0x08000291
 8000568:	20000090 	.word	0x20000090
 800056c:	080002a1 	.word	0x080002a1
 8000570:	080002b1 	.word	0x080002b1
 8000574:	080002c1 	.word	0x080002c1

08000578 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	e00a      	b.n	80005a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800058a:	f3af 8000 	nop.w
 800058e:	4601      	mov	r1, r0
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	60ba      	str	r2, [r7, #8]
 8000596:	b2ca      	uxtb	r2, r1
 8000598:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	3301      	adds	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf0      	blt.n	800058a <_read+0x12>
  }

  return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b086      	sub	sp, #24
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	60f8      	str	r0, [r7, #12]
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	e009      	b.n	80005d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3301      	adds	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dbf1      	blt.n	80005c4 <_write+0x12>
  }
  return len;
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <_close>:

int _close(int file)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000612:	605a      	str	r2, [r3, #4]
  return 0;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <_isatty>:

int _isatty(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800065c:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <_sbrk+0x5c>)
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <_sbrk+0x60>)
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d102      	bne.n	8000676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <_sbrk+0x64>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <_sbrk+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <_sbrk+0x64>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	693a      	ldr	r2, [r7, #16]
 8000680:	429a      	cmp	r2, r3
 8000682:	d207      	bcs.n	8000694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000684:	f000 f846 	bl	8000714 <__errno>
 8000688:	4603      	mov	r3, r0
 800068a:	220c      	movs	r2, #12
 800068c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	e009      	b.n	80006a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <_sbrk+0x64>)
 80006a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20020000 	.word	0x20020000
 80006b4:	00000400 	.word	0x00000400
 80006b8:	200000a4 	.word	0x200000a4
 80006bc:	200000b8 	.word	0x200000b8

080006c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <LoopForever+0x6>)
  ldr r1, =_edata
 80006ca:	490d      	ldr	r1, [pc, #52]	; (8000700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <LoopForever+0xe>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e0:	4c0a      	ldr	r4, [pc, #40]	; (800070c <LoopForever+0x16>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ee:	f000 f817 	bl	8000720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f2:	f7ff ff19 	bl	8000528 <main>

080006f6 <LoopForever>:

LoopForever:
  b LoopForever
 80006f6:	e7fe      	b.n	80006f6 <LoopForever>
  ldr   r0, =_estack
 80006f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000704:	080018e4 	.word	0x080018e4
  ldr r2, =_sbss
 8000708:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800070c:	200000b8 	.word	0x200000b8

08000710 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC_IRQHandler>
	...

08000714 <__errno>:
 8000714:	4b01      	ldr	r3, [pc, #4]	; (800071c <__errno+0x8>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000010 	.word	0x20000010

08000720 <__libc_init_array>:
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	4d0d      	ldr	r5, [pc, #52]	; (8000758 <__libc_init_array+0x38>)
 8000724:	4c0d      	ldr	r4, [pc, #52]	; (800075c <__libc_init_array+0x3c>)
 8000726:	1b64      	subs	r4, r4, r5
 8000728:	10a4      	asrs	r4, r4, #2
 800072a:	2600      	movs	r6, #0
 800072c:	42a6      	cmp	r6, r4
 800072e:	d109      	bne.n	8000744 <__libc_init_array+0x24>
 8000730:	4d0b      	ldr	r5, [pc, #44]	; (8000760 <__libc_init_array+0x40>)
 8000732:	4c0c      	ldr	r4, [pc, #48]	; (8000764 <__libc_init_array+0x44>)
 8000734:	f001 f824 	bl	8001780 <_init>
 8000738:	1b64      	subs	r4, r4, r5
 800073a:	10a4      	asrs	r4, r4, #2
 800073c:	2600      	movs	r6, #0
 800073e:	42a6      	cmp	r6, r4
 8000740:	d105      	bne.n	800074e <__libc_init_array+0x2e>
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f855 3b04 	ldr.w	r3, [r5], #4
 8000748:	4798      	blx	r3
 800074a:	3601      	adds	r6, #1
 800074c:	e7ee      	b.n	800072c <__libc_init_array+0xc>
 800074e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000752:	4798      	blx	r3
 8000754:	3601      	adds	r6, #1
 8000756:	e7f2      	b.n	800073e <__libc_init_array+0x1e>
 8000758:	080018dc 	.word	0x080018dc
 800075c:	080018dc 	.word	0x080018dc
 8000760:	080018dc 	.word	0x080018dc
 8000764:	080018e0 	.word	0x080018e0

08000768 <memset>:
 8000768:	4402      	add	r2, r0
 800076a:	4603      	mov	r3, r0
 800076c:	4293      	cmp	r3, r2
 800076e:	d100      	bne.n	8000772 <memset+0xa>
 8000770:	4770      	bx	lr
 8000772:	f803 1b01 	strb.w	r1, [r3], #1
 8000776:	e7f9      	b.n	800076c <memset+0x4>

08000778 <iprintf>:
 8000778:	b40f      	push	{r0, r1, r2, r3}
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <iprintf+0x2c>)
 800077c:	b513      	push	{r0, r1, r4, lr}
 800077e:	681c      	ldr	r4, [r3, #0]
 8000780:	b124      	cbz	r4, 800078c <iprintf+0x14>
 8000782:	69a3      	ldr	r3, [r4, #24]
 8000784:	b913      	cbnz	r3, 800078c <iprintf+0x14>
 8000786:	4620      	mov	r0, r4
 8000788:	f000 fa5e 	bl	8000c48 <__sinit>
 800078c:	ab05      	add	r3, sp, #20
 800078e:	9a04      	ldr	r2, [sp, #16]
 8000790:	68a1      	ldr	r1, [r4, #8]
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	4620      	mov	r0, r4
 8000796:	f000 fc67 	bl	8001068 <_vfiprintf_r>
 800079a:	b002      	add	sp, #8
 800079c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a0:	b004      	add	sp, #16
 80007a2:	4770      	bx	lr
 80007a4:	20000010 	.word	0x20000010

080007a8 <_puts_r>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	460e      	mov	r6, r1
 80007ac:	4605      	mov	r5, r0
 80007ae:	b118      	cbz	r0, 80007b8 <_puts_r+0x10>
 80007b0:	6983      	ldr	r3, [r0, #24]
 80007b2:	b90b      	cbnz	r3, 80007b8 <_puts_r+0x10>
 80007b4:	f000 fa48 	bl	8000c48 <__sinit>
 80007b8:	69ab      	ldr	r3, [r5, #24]
 80007ba:	68ac      	ldr	r4, [r5, #8]
 80007bc:	b913      	cbnz	r3, 80007c4 <_puts_r+0x1c>
 80007be:	4628      	mov	r0, r5
 80007c0:	f000 fa42 	bl	8000c48 <__sinit>
 80007c4:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <_puts_r+0xd0>)
 80007c6:	429c      	cmp	r4, r3
 80007c8:	d120      	bne.n	800080c <_puts_r+0x64>
 80007ca:	686c      	ldr	r4, [r5, #4]
 80007cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007ce:	07db      	lsls	r3, r3, #31
 80007d0:	d405      	bmi.n	80007de <_puts_r+0x36>
 80007d2:	89a3      	ldrh	r3, [r4, #12]
 80007d4:	0598      	lsls	r0, r3, #22
 80007d6:	d402      	bmi.n	80007de <_puts_r+0x36>
 80007d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007da:	f000 fad3 	bl	8000d84 <__retarget_lock_acquire_recursive>
 80007de:	89a3      	ldrh	r3, [r4, #12]
 80007e0:	0719      	lsls	r1, r3, #28
 80007e2:	d51d      	bpl.n	8000820 <_puts_r+0x78>
 80007e4:	6923      	ldr	r3, [r4, #16]
 80007e6:	b1db      	cbz	r3, 8000820 <_puts_r+0x78>
 80007e8:	3e01      	subs	r6, #1
 80007ea:	68a3      	ldr	r3, [r4, #8]
 80007ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007f0:	3b01      	subs	r3, #1
 80007f2:	60a3      	str	r3, [r4, #8]
 80007f4:	bb39      	cbnz	r1, 8000846 <_puts_r+0x9e>
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da38      	bge.n	800086c <_puts_r+0xc4>
 80007fa:	4622      	mov	r2, r4
 80007fc:	210a      	movs	r1, #10
 80007fe:	4628      	mov	r0, r5
 8000800:	f000 f848 	bl	8000894 <__swbuf_r>
 8000804:	3001      	adds	r0, #1
 8000806:	d011      	beq.n	800082c <_puts_r+0x84>
 8000808:	250a      	movs	r5, #10
 800080a:	e011      	b.n	8000830 <_puts_r+0x88>
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <_puts_r+0xd4>)
 800080e:	429c      	cmp	r4, r3
 8000810:	d101      	bne.n	8000816 <_puts_r+0x6e>
 8000812:	68ac      	ldr	r4, [r5, #8]
 8000814:	e7da      	b.n	80007cc <_puts_r+0x24>
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <_puts_r+0xd8>)
 8000818:	429c      	cmp	r4, r3
 800081a:	bf08      	it	eq
 800081c:	68ec      	ldreq	r4, [r5, #12]
 800081e:	e7d5      	b.n	80007cc <_puts_r+0x24>
 8000820:	4621      	mov	r1, r4
 8000822:	4628      	mov	r0, r5
 8000824:	f000 f888 	bl	8000938 <__swsetup_r>
 8000828:	2800      	cmp	r0, #0
 800082a:	d0dd      	beq.n	80007e8 <_puts_r+0x40>
 800082c:	f04f 35ff 	mov.w	r5, #4294967295
 8000830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000832:	07da      	lsls	r2, r3, #31
 8000834:	d405      	bmi.n	8000842 <_puts_r+0x9a>
 8000836:	89a3      	ldrh	r3, [r4, #12]
 8000838:	059b      	lsls	r3, r3, #22
 800083a:	d402      	bmi.n	8000842 <_puts_r+0x9a>
 800083c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800083e:	f000 faa2 	bl	8000d86 <__retarget_lock_release_recursive>
 8000842:	4628      	mov	r0, r5
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	2b00      	cmp	r3, #0
 8000848:	da04      	bge.n	8000854 <_puts_r+0xac>
 800084a:	69a2      	ldr	r2, [r4, #24]
 800084c:	429a      	cmp	r2, r3
 800084e:	dc06      	bgt.n	800085e <_puts_r+0xb6>
 8000850:	290a      	cmp	r1, #10
 8000852:	d004      	beq.n	800085e <_puts_r+0xb6>
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	6022      	str	r2, [r4, #0]
 800085a:	7019      	strb	r1, [r3, #0]
 800085c:	e7c5      	b.n	80007ea <_puts_r+0x42>
 800085e:	4622      	mov	r2, r4
 8000860:	4628      	mov	r0, r5
 8000862:	f000 f817 	bl	8000894 <__swbuf_r>
 8000866:	3001      	adds	r0, #1
 8000868:	d1bf      	bne.n	80007ea <_puts_r+0x42>
 800086a:	e7df      	b.n	800082c <_puts_r+0x84>
 800086c:	6823      	ldr	r3, [r4, #0]
 800086e:	250a      	movs	r5, #10
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	6022      	str	r2, [r4, #0]
 8000874:	701d      	strb	r5, [r3, #0]
 8000876:	e7db      	b.n	8000830 <_puts_r+0x88>
 8000878:	08001868 	.word	0x08001868
 800087c:	08001888 	.word	0x08001888
 8000880:	08001848 	.word	0x08001848

08000884 <puts>:
 8000884:	4b02      	ldr	r3, [pc, #8]	; (8000890 <puts+0xc>)
 8000886:	4601      	mov	r1, r0
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	f7ff bf8d 	b.w	80007a8 <_puts_r>
 800088e:	bf00      	nop
 8000890:	20000010 	.word	0x20000010

08000894 <__swbuf_r>:
 8000894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000896:	460e      	mov	r6, r1
 8000898:	4614      	mov	r4, r2
 800089a:	4605      	mov	r5, r0
 800089c:	b118      	cbz	r0, 80008a6 <__swbuf_r+0x12>
 800089e:	6983      	ldr	r3, [r0, #24]
 80008a0:	b90b      	cbnz	r3, 80008a6 <__swbuf_r+0x12>
 80008a2:	f000 f9d1 	bl	8000c48 <__sinit>
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <__swbuf_r+0x98>)
 80008a8:	429c      	cmp	r4, r3
 80008aa:	d12b      	bne.n	8000904 <__swbuf_r+0x70>
 80008ac:	686c      	ldr	r4, [r5, #4]
 80008ae:	69a3      	ldr	r3, [r4, #24]
 80008b0:	60a3      	str	r3, [r4, #8]
 80008b2:	89a3      	ldrh	r3, [r4, #12]
 80008b4:	071a      	lsls	r2, r3, #28
 80008b6:	d52f      	bpl.n	8000918 <__swbuf_r+0x84>
 80008b8:	6923      	ldr	r3, [r4, #16]
 80008ba:	b36b      	cbz	r3, 8000918 <__swbuf_r+0x84>
 80008bc:	6923      	ldr	r3, [r4, #16]
 80008be:	6820      	ldr	r0, [r4, #0]
 80008c0:	1ac0      	subs	r0, r0, r3
 80008c2:	6963      	ldr	r3, [r4, #20]
 80008c4:	b2f6      	uxtb	r6, r6
 80008c6:	4283      	cmp	r3, r0
 80008c8:	4637      	mov	r7, r6
 80008ca:	dc04      	bgt.n	80008d6 <__swbuf_r+0x42>
 80008cc:	4621      	mov	r1, r4
 80008ce:	4628      	mov	r0, r5
 80008d0:	f000 f926 	bl	8000b20 <_fflush_r>
 80008d4:	bb30      	cbnz	r0, 8000924 <__swbuf_r+0x90>
 80008d6:	68a3      	ldr	r3, [r4, #8]
 80008d8:	3b01      	subs	r3, #1
 80008da:	60a3      	str	r3, [r4, #8]
 80008dc:	6823      	ldr	r3, [r4, #0]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	6022      	str	r2, [r4, #0]
 80008e2:	701e      	strb	r6, [r3, #0]
 80008e4:	6963      	ldr	r3, [r4, #20]
 80008e6:	3001      	adds	r0, #1
 80008e8:	4283      	cmp	r3, r0
 80008ea:	d004      	beq.n	80008f6 <__swbuf_r+0x62>
 80008ec:	89a3      	ldrh	r3, [r4, #12]
 80008ee:	07db      	lsls	r3, r3, #31
 80008f0:	d506      	bpl.n	8000900 <__swbuf_r+0x6c>
 80008f2:	2e0a      	cmp	r6, #10
 80008f4:	d104      	bne.n	8000900 <__swbuf_r+0x6c>
 80008f6:	4621      	mov	r1, r4
 80008f8:	4628      	mov	r0, r5
 80008fa:	f000 f911 	bl	8000b20 <_fflush_r>
 80008fe:	b988      	cbnz	r0, 8000924 <__swbuf_r+0x90>
 8000900:	4638      	mov	r0, r7
 8000902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <__swbuf_r+0x9c>)
 8000906:	429c      	cmp	r4, r3
 8000908:	d101      	bne.n	800090e <__swbuf_r+0x7a>
 800090a:	68ac      	ldr	r4, [r5, #8]
 800090c:	e7cf      	b.n	80008ae <__swbuf_r+0x1a>
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <__swbuf_r+0xa0>)
 8000910:	429c      	cmp	r4, r3
 8000912:	bf08      	it	eq
 8000914:	68ec      	ldreq	r4, [r5, #12]
 8000916:	e7ca      	b.n	80008ae <__swbuf_r+0x1a>
 8000918:	4621      	mov	r1, r4
 800091a:	4628      	mov	r0, r5
 800091c:	f000 f80c 	bl	8000938 <__swsetup_r>
 8000920:	2800      	cmp	r0, #0
 8000922:	d0cb      	beq.n	80008bc <__swbuf_r+0x28>
 8000924:	f04f 37ff 	mov.w	r7, #4294967295
 8000928:	e7ea      	b.n	8000900 <__swbuf_r+0x6c>
 800092a:	bf00      	nop
 800092c:	08001868 	.word	0x08001868
 8000930:	08001888 	.word	0x08001888
 8000934:	08001848 	.word	0x08001848

08000938 <__swsetup_r>:
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <__swsetup_r+0xcc>)
 800093a:	b570      	push	{r4, r5, r6, lr}
 800093c:	681d      	ldr	r5, [r3, #0]
 800093e:	4606      	mov	r6, r0
 8000940:	460c      	mov	r4, r1
 8000942:	b125      	cbz	r5, 800094e <__swsetup_r+0x16>
 8000944:	69ab      	ldr	r3, [r5, #24]
 8000946:	b913      	cbnz	r3, 800094e <__swsetup_r+0x16>
 8000948:	4628      	mov	r0, r5
 800094a:	f000 f97d 	bl	8000c48 <__sinit>
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <__swsetup_r+0xd0>)
 8000950:	429c      	cmp	r4, r3
 8000952:	d10f      	bne.n	8000974 <__swsetup_r+0x3c>
 8000954:	686c      	ldr	r4, [r5, #4]
 8000956:	89a3      	ldrh	r3, [r4, #12]
 8000958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800095c:	0719      	lsls	r1, r3, #28
 800095e:	d42c      	bmi.n	80009ba <__swsetup_r+0x82>
 8000960:	06dd      	lsls	r5, r3, #27
 8000962:	d411      	bmi.n	8000988 <__swsetup_r+0x50>
 8000964:	2309      	movs	r3, #9
 8000966:	6033      	str	r3, [r6, #0]
 8000968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800096c:	81a3      	strh	r3, [r4, #12]
 800096e:	f04f 30ff 	mov.w	r0, #4294967295
 8000972:	e03e      	b.n	80009f2 <__swsetup_r+0xba>
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <__swsetup_r+0xd4>)
 8000976:	429c      	cmp	r4, r3
 8000978:	d101      	bne.n	800097e <__swsetup_r+0x46>
 800097a:	68ac      	ldr	r4, [r5, #8]
 800097c:	e7eb      	b.n	8000956 <__swsetup_r+0x1e>
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <__swsetup_r+0xd8>)
 8000980:	429c      	cmp	r4, r3
 8000982:	bf08      	it	eq
 8000984:	68ec      	ldreq	r4, [r5, #12]
 8000986:	e7e6      	b.n	8000956 <__swsetup_r+0x1e>
 8000988:	0758      	lsls	r0, r3, #29
 800098a:	d512      	bpl.n	80009b2 <__swsetup_r+0x7a>
 800098c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800098e:	b141      	cbz	r1, 80009a2 <__swsetup_r+0x6a>
 8000990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000994:	4299      	cmp	r1, r3
 8000996:	d002      	beq.n	800099e <__swsetup_r+0x66>
 8000998:	4630      	mov	r0, r6
 800099a:	f000 fa5b 	bl	8000e54 <_free_r>
 800099e:	2300      	movs	r3, #0
 80009a0:	6363      	str	r3, [r4, #52]	; 0x34
 80009a2:	89a3      	ldrh	r3, [r4, #12]
 80009a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009a8:	81a3      	strh	r3, [r4, #12]
 80009aa:	2300      	movs	r3, #0
 80009ac:	6063      	str	r3, [r4, #4]
 80009ae:	6923      	ldr	r3, [r4, #16]
 80009b0:	6023      	str	r3, [r4, #0]
 80009b2:	89a3      	ldrh	r3, [r4, #12]
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	81a3      	strh	r3, [r4, #12]
 80009ba:	6923      	ldr	r3, [r4, #16]
 80009bc:	b94b      	cbnz	r3, 80009d2 <__swsetup_r+0x9a>
 80009be:	89a3      	ldrh	r3, [r4, #12]
 80009c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80009c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009c8:	d003      	beq.n	80009d2 <__swsetup_r+0x9a>
 80009ca:	4621      	mov	r1, r4
 80009cc:	4630      	mov	r0, r6
 80009ce:	f000 fa01 	bl	8000dd4 <__smakebuf_r>
 80009d2:	89a0      	ldrh	r0, [r4, #12]
 80009d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009d8:	f010 0301 	ands.w	r3, r0, #1
 80009dc:	d00a      	beq.n	80009f4 <__swsetup_r+0xbc>
 80009de:	2300      	movs	r3, #0
 80009e0:	60a3      	str	r3, [r4, #8]
 80009e2:	6963      	ldr	r3, [r4, #20]
 80009e4:	425b      	negs	r3, r3
 80009e6:	61a3      	str	r3, [r4, #24]
 80009e8:	6923      	ldr	r3, [r4, #16]
 80009ea:	b943      	cbnz	r3, 80009fe <__swsetup_r+0xc6>
 80009ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009f0:	d1ba      	bne.n	8000968 <__swsetup_r+0x30>
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	0781      	lsls	r1, r0, #30
 80009f6:	bf58      	it	pl
 80009f8:	6963      	ldrpl	r3, [r4, #20]
 80009fa:	60a3      	str	r3, [r4, #8]
 80009fc:	e7f4      	b.n	80009e8 <__swsetup_r+0xb0>
 80009fe:	2000      	movs	r0, #0
 8000a00:	e7f7      	b.n	80009f2 <__swsetup_r+0xba>
 8000a02:	bf00      	nop
 8000a04:	20000010 	.word	0x20000010
 8000a08:	08001868 	.word	0x08001868
 8000a0c:	08001888 	.word	0x08001888
 8000a10:	08001848 	.word	0x08001848

08000a14 <__sflush_r>:
 8000a14:	898a      	ldrh	r2, [r1, #12]
 8000a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a1a:	4605      	mov	r5, r0
 8000a1c:	0710      	lsls	r0, r2, #28
 8000a1e:	460c      	mov	r4, r1
 8000a20:	d458      	bmi.n	8000ad4 <__sflush_r+0xc0>
 8000a22:	684b      	ldr	r3, [r1, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	dc05      	bgt.n	8000a34 <__sflush_r+0x20>
 8000a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	dc02      	bgt.n	8000a34 <__sflush_r+0x20>
 8000a2e:	2000      	movs	r0, #0
 8000a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	d0f9      	beq.n	8000a2e <__sflush_r+0x1a>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a40:	682f      	ldr	r7, [r5, #0]
 8000a42:	602b      	str	r3, [r5, #0]
 8000a44:	d032      	beq.n	8000aac <__sflush_r+0x98>
 8000a46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a48:	89a3      	ldrh	r3, [r4, #12]
 8000a4a:	075a      	lsls	r2, r3, #29
 8000a4c:	d505      	bpl.n	8000a5a <__sflush_r+0x46>
 8000a4e:	6863      	ldr	r3, [r4, #4]
 8000a50:	1ac0      	subs	r0, r0, r3
 8000a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a54:	b10b      	cbz	r3, 8000a5a <__sflush_r+0x46>
 8000a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a58:	1ac0      	subs	r0, r0, r3
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a60:	6a21      	ldr	r1, [r4, #32]
 8000a62:	4628      	mov	r0, r5
 8000a64:	47b0      	blx	r6
 8000a66:	1c43      	adds	r3, r0, #1
 8000a68:	89a3      	ldrh	r3, [r4, #12]
 8000a6a:	d106      	bne.n	8000a7a <__sflush_r+0x66>
 8000a6c:	6829      	ldr	r1, [r5, #0]
 8000a6e:	291d      	cmp	r1, #29
 8000a70:	d82c      	bhi.n	8000acc <__sflush_r+0xb8>
 8000a72:	4a2a      	ldr	r2, [pc, #168]	; (8000b1c <__sflush_r+0x108>)
 8000a74:	40ca      	lsrs	r2, r1
 8000a76:	07d6      	lsls	r6, r2, #31
 8000a78:	d528      	bpl.n	8000acc <__sflush_r+0xb8>
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	6062      	str	r2, [r4, #4]
 8000a7e:	04d9      	lsls	r1, r3, #19
 8000a80:	6922      	ldr	r2, [r4, #16]
 8000a82:	6022      	str	r2, [r4, #0]
 8000a84:	d504      	bpl.n	8000a90 <__sflush_r+0x7c>
 8000a86:	1c42      	adds	r2, r0, #1
 8000a88:	d101      	bne.n	8000a8e <__sflush_r+0x7a>
 8000a8a:	682b      	ldr	r3, [r5, #0]
 8000a8c:	b903      	cbnz	r3, 8000a90 <__sflush_r+0x7c>
 8000a8e:	6560      	str	r0, [r4, #84]	; 0x54
 8000a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a92:	602f      	str	r7, [r5, #0]
 8000a94:	2900      	cmp	r1, #0
 8000a96:	d0ca      	beq.n	8000a2e <__sflush_r+0x1a>
 8000a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	d002      	beq.n	8000aa6 <__sflush_r+0x92>
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	f000 f9d7 	bl	8000e54 <_free_r>
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8000aaa:	e7c1      	b.n	8000a30 <__sflush_r+0x1c>
 8000aac:	6a21      	ldr	r1, [r4, #32]
 8000aae:	2301      	movs	r3, #1
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	47b0      	blx	r6
 8000ab4:	1c41      	adds	r1, r0, #1
 8000ab6:	d1c7      	bne.n	8000a48 <__sflush_r+0x34>
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0c4      	beq.n	8000a48 <__sflush_r+0x34>
 8000abe:	2b1d      	cmp	r3, #29
 8000ac0:	d001      	beq.n	8000ac6 <__sflush_r+0xb2>
 8000ac2:	2b16      	cmp	r3, #22
 8000ac4:	d101      	bne.n	8000aca <__sflush_r+0xb6>
 8000ac6:	602f      	str	r7, [r5, #0]
 8000ac8:	e7b1      	b.n	8000a2e <__sflush_r+0x1a>
 8000aca:	89a3      	ldrh	r3, [r4, #12]
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	81a3      	strh	r3, [r4, #12]
 8000ad2:	e7ad      	b.n	8000a30 <__sflush_r+0x1c>
 8000ad4:	690f      	ldr	r7, [r1, #16]
 8000ad6:	2f00      	cmp	r7, #0
 8000ad8:	d0a9      	beq.n	8000a2e <__sflush_r+0x1a>
 8000ada:	0793      	lsls	r3, r2, #30
 8000adc:	680e      	ldr	r6, [r1, #0]
 8000ade:	bf08      	it	eq
 8000ae0:	694b      	ldreq	r3, [r1, #20]
 8000ae2:	600f      	str	r7, [r1, #0]
 8000ae4:	bf18      	it	ne
 8000ae6:	2300      	movne	r3, #0
 8000ae8:	eba6 0807 	sub.w	r8, r6, r7
 8000aec:	608b      	str	r3, [r1, #8]
 8000aee:	f1b8 0f00 	cmp.w	r8, #0
 8000af2:	dd9c      	ble.n	8000a2e <__sflush_r+0x1a>
 8000af4:	6a21      	ldr	r1, [r4, #32]
 8000af6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000af8:	4643      	mov	r3, r8
 8000afa:	463a      	mov	r2, r7
 8000afc:	4628      	mov	r0, r5
 8000afe:	47b0      	blx	r6
 8000b00:	2800      	cmp	r0, #0
 8000b02:	dc06      	bgt.n	8000b12 <__sflush_r+0xfe>
 8000b04:	89a3      	ldrh	r3, [r4, #12]
 8000b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b0a:	81a3      	strh	r3, [r4, #12]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	e78e      	b.n	8000a30 <__sflush_r+0x1c>
 8000b12:	4407      	add	r7, r0
 8000b14:	eba8 0800 	sub.w	r8, r8, r0
 8000b18:	e7e9      	b.n	8000aee <__sflush_r+0xda>
 8000b1a:	bf00      	nop
 8000b1c:	20400001 	.word	0x20400001

08000b20 <_fflush_r>:
 8000b20:	b538      	push	{r3, r4, r5, lr}
 8000b22:	690b      	ldr	r3, [r1, #16]
 8000b24:	4605      	mov	r5, r0
 8000b26:	460c      	mov	r4, r1
 8000b28:	b913      	cbnz	r3, 8000b30 <_fflush_r+0x10>
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	bd38      	pop	{r3, r4, r5, pc}
 8000b30:	b118      	cbz	r0, 8000b3a <_fflush_r+0x1a>
 8000b32:	6983      	ldr	r3, [r0, #24]
 8000b34:	b90b      	cbnz	r3, 8000b3a <_fflush_r+0x1a>
 8000b36:	f000 f887 	bl	8000c48 <__sinit>
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <_fflush_r+0x6c>)
 8000b3c:	429c      	cmp	r4, r3
 8000b3e:	d11b      	bne.n	8000b78 <_fflush_r+0x58>
 8000b40:	686c      	ldr	r4, [r5, #4]
 8000b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0ef      	beq.n	8000b2a <_fflush_r+0xa>
 8000b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b4c:	07d0      	lsls	r0, r2, #31
 8000b4e:	d404      	bmi.n	8000b5a <_fflush_r+0x3a>
 8000b50:	0599      	lsls	r1, r3, #22
 8000b52:	d402      	bmi.n	8000b5a <_fflush_r+0x3a>
 8000b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b56:	f000 f915 	bl	8000d84 <__retarget_lock_acquire_recursive>
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	f7ff ff59 	bl	8000a14 <__sflush_r>
 8000b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b64:	07da      	lsls	r2, r3, #31
 8000b66:	4605      	mov	r5, r0
 8000b68:	d4e0      	bmi.n	8000b2c <_fflush_r+0xc>
 8000b6a:	89a3      	ldrh	r3, [r4, #12]
 8000b6c:	059b      	lsls	r3, r3, #22
 8000b6e:	d4dd      	bmi.n	8000b2c <_fflush_r+0xc>
 8000b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b72:	f000 f908 	bl	8000d86 <__retarget_lock_release_recursive>
 8000b76:	e7d9      	b.n	8000b2c <_fflush_r+0xc>
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <_fflush_r+0x70>)
 8000b7a:	429c      	cmp	r4, r3
 8000b7c:	d101      	bne.n	8000b82 <_fflush_r+0x62>
 8000b7e:	68ac      	ldr	r4, [r5, #8]
 8000b80:	e7df      	b.n	8000b42 <_fflush_r+0x22>
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <_fflush_r+0x74>)
 8000b84:	429c      	cmp	r4, r3
 8000b86:	bf08      	it	eq
 8000b88:	68ec      	ldreq	r4, [r5, #12]
 8000b8a:	e7da      	b.n	8000b42 <_fflush_r+0x22>
 8000b8c:	08001868 	.word	0x08001868
 8000b90:	08001888 	.word	0x08001888
 8000b94:	08001848 	.word	0x08001848

08000b98 <std>:
 8000b98:	2300      	movs	r3, #0
 8000b9a:	b510      	push	{r4, lr}
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8000ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ba6:	6083      	str	r3, [r0, #8]
 8000ba8:	8181      	strh	r1, [r0, #12]
 8000baa:	6643      	str	r3, [r0, #100]	; 0x64
 8000bac:	81c2      	strh	r2, [r0, #14]
 8000bae:	6183      	str	r3, [r0, #24]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	305c      	adds	r0, #92	; 0x5c
 8000bb6:	f7ff fdd7 	bl	8000768 <memset>
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <std+0x38>)
 8000bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <std+0x3c>)
 8000bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <std+0x40>)
 8000bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <std+0x44>)
 8000bc8:	6224      	str	r4, [r4, #32]
 8000bca:	6323      	str	r3, [r4, #48]	; 0x30
 8000bcc:	bd10      	pop	{r4, pc}
 8000bce:	bf00      	nop
 8000bd0:	08001611 	.word	0x08001611
 8000bd4:	08001633 	.word	0x08001633
 8000bd8:	0800166b 	.word	0x0800166b
 8000bdc:	0800168f 	.word	0x0800168f

08000be0 <_cleanup_r>:
 8000be0:	4901      	ldr	r1, [pc, #4]	; (8000be8 <_cleanup_r+0x8>)
 8000be2:	f000 b8af 	b.w	8000d44 <_fwalk_reent>
 8000be6:	bf00      	nop
 8000be8:	08000b21 	.word	0x08000b21

08000bec <__sfmoreglue>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	2268      	movs	r2, #104	; 0x68
 8000bf0:	1e4d      	subs	r5, r1, #1
 8000bf2:	4355      	muls	r5, r2
 8000bf4:	460e      	mov	r6, r1
 8000bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000bfa:	f000 f997 	bl	8000f2c <_malloc_r>
 8000bfe:	4604      	mov	r4, r0
 8000c00:	b140      	cbz	r0, 8000c14 <__sfmoreglue+0x28>
 8000c02:	2100      	movs	r1, #0
 8000c04:	e9c0 1600 	strd	r1, r6, [r0]
 8000c08:	300c      	adds	r0, #12
 8000c0a:	60a0      	str	r0, [r4, #8]
 8000c0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c10:	f7ff fdaa 	bl	8000768 <memset>
 8000c14:	4620      	mov	r0, r4
 8000c16:	bd70      	pop	{r4, r5, r6, pc}

08000c18 <__sfp_lock_acquire>:
 8000c18:	4801      	ldr	r0, [pc, #4]	; (8000c20 <__sfp_lock_acquire+0x8>)
 8000c1a:	f000 b8b3 	b.w	8000d84 <__retarget_lock_acquire_recursive>
 8000c1e:	bf00      	nop
 8000c20:	200000a9 	.word	0x200000a9

08000c24 <__sfp_lock_release>:
 8000c24:	4801      	ldr	r0, [pc, #4]	; (8000c2c <__sfp_lock_release+0x8>)
 8000c26:	f000 b8ae 	b.w	8000d86 <__retarget_lock_release_recursive>
 8000c2a:	bf00      	nop
 8000c2c:	200000a9 	.word	0x200000a9

08000c30 <__sinit_lock_acquire>:
 8000c30:	4801      	ldr	r0, [pc, #4]	; (8000c38 <__sinit_lock_acquire+0x8>)
 8000c32:	f000 b8a7 	b.w	8000d84 <__retarget_lock_acquire_recursive>
 8000c36:	bf00      	nop
 8000c38:	200000aa 	.word	0x200000aa

08000c3c <__sinit_lock_release>:
 8000c3c:	4801      	ldr	r0, [pc, #4]	; (8000c44 <__sinit_lock_release+0x8>)
 8000c3e:	f000 b8a2 	b.w	8000d86 <__retarget_lock_release_recursive>
 8000c42:	bf00      	nop
 8000c44:	200000aa 	.word	0x200000aa

08000c48 <__sinit>:
 8000c48:	b510      	push	{r4, lr}
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	f7ff fff0 	bl	8000c30 <__sinit_lock_acquire>
 8000c50:	69a3      	ldr	r3, [r4, #24]
 8000c52:	b11b      	cbz	r3, 8000c5c <__sinit+0x14>
 8000c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c58:	f7ff bff0 	b.w	8000c3c <__sinit_lock_release>
 8000c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000c60:	6523      	str	r3, [r4, #80]	; 0x50
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <__sinit+0x68>)
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <__sinit+0x6c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	62a2      	str	r2, [r4, #40]	; 0x28
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	bf04      	itt	eq
 8000c6e:	2301      	moveq	r3, #1
 8000c70:	61a3      	streq	r3, [r4, #24]
 8000c72:	4620      	mov	r0, r4
 8000c74:	f000 f820 	bl	8000cb8 <__sfp>
 8000c78:	6060      	str	r0, [r4, #4]
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f000 f81c 	bl	8000cb8 <__sfp>
 8000c80:	60a0      	str	r0, [r4, #8]
 8000c82:	4620      	mov	r0, r4
 8000c84:	f000 f818 	bl	8000cb8 <__sfp>
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60e0      	str	r0, [r4, #12]
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	6860      	ldr	r0, [r4, #4]
 8000c90:	f7ff ff82 	bl	8000b98 <std>
 8000c94:	68a0      	ldr	r0, [r4, #8]
 8000c96:	2201      	movs	r2, #1
 8000c98:	2109      	movs	r1, #9
 8000c9a:	f7ff ff7d 	bl	8000b98 <std>
 8000c9e:	68e0      	ldr	r0, [r4, #12]
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	2112      	movs	r1, #18
 8000ca4:	f7ff ff78 	bl	8000b98 <std>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61a3      	str	r3, [r4, #24]
 8000cac:	e7d2      	b.n	8000c54 <__sinit+0xc>
 8000cae:	bf00      	nop
 8000cb0:	08001844 	.word	0x08001844
 8000cb4:	08000be1 	.word	0x08000be1

08000cb8 <__sfp>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	4607      	mov	r7, r0
 8000cbc:	f7ff ffac 	bl	8000c18 <__sfp_lock_acquire>
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <__sfp+0x84>)
 8000cc2:	681e      	ldr	r6, [r3, #0]
 8000cc4:	69b3      	ldr	r3, [r6, #24]
 8000cc6:	b913      	cbnz	r3, 8000cce <__sfp+0x16>
 8000cc8:	4630      	mov	r0, r6
 8000cca:	f7ff ffbd 	bl	8000c48 <__sinit>
 8000cce:	3648      	adds	r6, #72	; 0x48
 8000cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	d503      	bpl.n	8000ce0 <__sfp+0x28>
 8000cd8:	6833      	ldr	r3, [r6, #0]
 8000cda:	b30b      	cbz	r3, 8000d20 <__sfp+0x68>
 8000cdc:	6836      	ldr	r6, [r6, #0]
 8000cde:	e7f7      	b.n	8000cd0 <__sfp+0x18>
 8000ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ce4:	b9d5      	cbnz	r5, 8000d1c <__sfp+0x64>
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <__sfp+0x88>)
 8000ce8:	60e3      	str	r3, [r4, #12]
 8000cea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000cee:	6665      	str	r5, [r4, #100]	; 0x64
 8000cf0:	f000 f847 	bl	8000d82 <__retarget_lock_init_recursive>
 8000cf4:	f7ff ff96 	bl	8000c24 <__sfp_lock_release>
 8000cf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000cfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000d00:	6025      	str	r5, [r4, #0]
 8000d02:	61a5      	str	r5, [r4, #24]
 8000d04:	2208      	movs	r2, #8
 8000d06:	4629      	mov	r1, r5
 8000d08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d0c:	f7ff fd2c 	bl	8000768 <memset>
 8000d10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d18:	4620      	mov	r0, r4
 8000d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d1c:	3468      	adds	r4, #104	; 0x68
 8000d1e:	e7d9      	b.n	8000cd4 <__sfp+0x1c>
 8000d20:	2104      	movs	r1, #4
 8000d22:	4638      	mov	r0, r7
 8000d24:	f7ff ff62 	bl	8000bec <__sfmoreglue>
 8000d28:	4604      	mov	r4, r0
 8000d2a:	6030      	str	r0, [r6, #0]
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d1d5      	bne.n	8000cdc <__sfp+0x24>
 8000d30:	f7ff ff78 	bl	8000c24 <__sfp_lock_release>
 8000d34:	230c      	movs	r3, #12
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	e7ee      	b.n	8000d18 <__sfp+0x60>
 8000d3a:	bf00      	nop
 8000d3c:	08001844 	.word	0x08001844
 8000d40:	ffff0001 	.word	0xffff0001

08000d44 <_fwalk_reent>:
 8000d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4688      	mov	r8, r1
 8000d4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d50:	2700      	movs	r7, #0
 8000d52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d56:	f1b9 0901 	subs.w	r9, r9, #1
 8000d5a:	d505      	bpl.n	8000d68 <_fwalk_reent+0x24>
 8000d5c:	6824      	ldr	r4, [r4, #0]
 8000d5e:	2c00      	cmp	r4, #0
 8000d60:	d1f7      	bne.n	8000d52 <_fwalk_reent+0xe>
 8000d62:	4638      	mov	r0, r7
 8000d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d68:	89ab      	ldrh	r3, [r5, #12]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d907      	bls.n	8000d7e <_fwalk_reent+0x3a>
 8000d6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d72:	3301      	adds	r3, #1
 8000d74:	d003      	beq.n	8000d7e <_fwalk_reent+0x3a>
 8000d76:	4629      	mov	r1, r5
 8000d78:	4630      	mov	r0, r6
 8000d7a:	47c0      	blx	r8
 8000d7c:	4307      	orrs	r7, r0
 8000d7e:	3568      	adds	r5, #104	; 0x68
 8000d80:	e7e9      	b.n	8000d56 <_fwalk_reent+0x12>

08000d82 <__retarget_lock_init_recursive>:
 8000d82:	4770      	bx	lr

08000d84 <__retarget_lock_acquire_recursive>:
 8000d84:	4770      	bx	lr

08000d86 <__retarget_lock_release_recursive>:
 8000d86:	4770      	bx	lr

08000d88 <__swhatbuf_r>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	460e      	mov	r6, r1
 8000d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d90:	2900      	cmp	r1, #0
 8000d92:	b096      	sub	sp, #88	; 0x58
 8000d94:	4614      	mov	r4, r2
 8000d96:	461d      	mov	r5, r3
 8000d98:	da08      	bge.n	8000dac <__swhatbuf_r+0x24>
 8000d9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	602a      	str	r2, [r5, #0]
 8000da2:	061a      	lsls	r2, r3, #24
 8000da4:	d410      	bmi.n	8000dc8 <__swhatbuf_r+0x40>
 8000da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000daa:	e00e      	b.n	8000dca <__swhatbuf_r+0x42>
 8000dac:	466a      	mov	r2, sp
 8000dae:	f000 fc95 	bl	80016dc <_fstat_r>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	dbf1      	blt.n	8000d9a <__swhatbuf_r+0x12>
 8000db6:	9a01      	ldr	r2, [sp, #4]
 8000db8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000dbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000dc0:	425a      	negs	r2, r3
 8000dc2:	415a      	adcs	r2, r3
 8000dc4:	602a      	str	r2, [r5, #0]
 8000dc6:	e7ee      	b.n	8000da6 <__swhatbuf_r+0x1e>
 8000dc8:	2340      	movs	r3, #64	; 0x40
 8000dca:	2000      	movs	r0, #0
 8000dcc:	6023      	str	r3, [r4, #0]
 8000dce:	b016      	add	sp, #88	; 0x58
 8000dd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000dd4 <__smakebuf_r>:
 8000dd4:	898b      	ldrh	r3, [r1, #12]
 8000dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dd8:	079d      	lsls	r5, r3, #30
 8000dda:	4606      	mov	r6, r0
 8000ddc:	460c      	mov	r4, r1
 8000dde:	d507      	bpl.n	8000df0 <__smakebuf_r+0x1c>
 8000de0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000de4:	6023      	str	r3, [r4, #0]
 8000de6:	6123      	str	r3, [r4, #16]
 8000de8:	2301      	movs	r3, #1
 8000dea:	6163      	str	r3, [r4, #20]
 8000dec:	b002      	add	sp, #8
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
 8000df0:	ab01      	add	r3, sp, #4
 8000df2:	466a      	mov	r2, sp
 8000df4:	f7ff ffc8 	bl	8000d88 <__swhatbuf_r>
 8000df8:	9900      	ldr	r1, [sp, #0]
 8000dfa:	4605      	mov	r5, r0
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f000 f895 	bl	8000f2c <_malloc_r>
 8000e02:	b948      	cbnz	r0, 8000e18 <__smakebuf_r+0x44>
 8000e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e08:	059a      	lsls	r2, r3, #22
 8000e0a:	d4ef      	bmi.n	8000dec <__smakebuf_r+0x18>
 8000e0c:	f023 0303 	bic.w	r3, r3, #3
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	81a3      	strh	r3, [r4, #12]
 8000e16:	e7e3      	b.n	8000de0 <__smakebuf_r+0xc>
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <__smakebuf_r+0x7c>)
 8000e1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e1c:	89a3      	ldrh	r3, [r4, #12]
 8000e1e:	6020      	str	r0, [r4, #0]
 8000e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e24:	81a3      	strh	r3, [r4, #12]
 8000e26:	9b00      	ldr	r3, [sp, #0]
 8000e28:	6163      	str	r3, [r4, #20]
 8000e2a:	9b01      	ldr	r3, [sp, #4]
 8000e2c:	6120      	str	r0, [r4, #16]
 8000e2e:	b15b      	cbz	r3, 8000e48 <__smakebuf_r+0x74>
 8000e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e34:	4630      	mov	r0, r6
 8000e36:	f000 fc63 	bl	8001700 <_isatty_r>
 8000e3a:	b128      	cbz	r0, 8000e48 <__smakebuf_r+0x74>
 8000e3c:	89a3      	ldrh	r3, [r4, #12]
 8000e3e:	f023 0303 	bic.w	r3, r3, #3
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	81a3      	strh	r3, [r4, #12]
 8000e48:	89a0      	ldrh	r0, [r4, #12]
 8000e4a:	4305      	orrs	r5, r0
 8000e4c:	81a5      	strh	r5, [r4, #12]
 8000e4e:	e7cd      	b.n	8000dec <__smakebuf_r+0x18>
 8000e50:	08000be1 	.word	0x08000be1

08000e54 <_free_r>:
 8000e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e56:	2900      	cmp	r1, #0
 8000e58:	d044      	beq.n	8000ee4 <_free_r+0x90>
 8000e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e5e:	9001      	str	r0, [sp, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f1a1 0404 	sub.w	r4, r1, #4
 8000e66:	bfb8      	it	lt
 8000e68:	18e4      	addlt	r4, r4, r3
 8000e6a:	f000 fc6b 	bl	8001744 <__malloc_lock>
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <_free_r+0x94>)
 8000e70:	9801      	ldr	r0, [sp, #4]
 8000e72:	6813      	ldr	r3, [r2, #0]
 8000e74:	b933      	cbnz	r3, 8000e84 <_free_r+0x30>
 8000e76:	6063      	str	r3, [r4, #4]
 8000e78:	6014      	str	r4, [r2, #0]
 8000e7a:	b003      	add	sp, #12
 8000e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e80:	f000 bc66 	b.w	8001750 <__malloc_unlock>
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <_free_r+0x46>
 8000e88:	6825      	ldr	r5, [r4, #0]
 8000e8a:	1961      	adds	r1, r4, r5
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	bf01      	itttt	eq
 8000e90:	6819      	ldreq	r1, [r3, #0]
 8000e92:	685b      	ldreq	r3, [r3, #4]
 8000e94:	1949      	addeq	r1, r1, r5
 8000e96:	6021      	streq	r1, [r4, #0]
 8000e98:	e7ed      	b.n	8000e76 <_free_r+0x22>
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	b10b      	cbz	r3, 8000ea4 <_free_r+0x50>
 8000ea0:	42a3      	cmp	r3, r4
 8000ea2:	d9fa      	bls.n	8000e9a <_free_r+0x46>
 8000ea4:	6811      	ldr	r1, [r2, #0]
 8000ea6:	1855      	adds	r5, r2, r1
 8000ea8:	42a5      	cmp	r5, r4
 8000eaa:	d10b      	bne.n	8000ec4 <_free_r+0x70>
 8000eac:	6824      	ldr	r4, [r4, #0]
 8000eae:	4421      	add	r1, r4
 8000eb0:	1854      	adds	r4, r2, r1
 8000eb2:	42a3      	cmp	r3, r4
 8000eb4:	6011      	str	r1, [r2, #0]
 8000eb6:	d1e0      	bne.n	8000e7a <_free_r+0x26>
 8000eb8:	681c      	ldr	r4, [r3, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	6053      	str	r3, [r2, #4]
 8000ebe:	4421      	add	r1, r4
 8000ec0:	6011      	str	r1, [r2, #0]
 8000ec2:	e7da      	b.n	8000e7a <_free_r+0x26>
 8000ec4:	d902      	bls.n	8000ecc <_free_r+0x78>
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	6003      	str	r3, [r0, #0]
 8000eca:	e7d6      	b.n	8000e7a <_free_r+0x26>
 8000ecc:	6825      	ldr	r5, [r4, #0]
 8000ece:	1961      	adds	r1, r4, r5
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf04      	itt	eq
 8000ed4:	6819      	ldreq	r1, [r3, #0]
 8000ed6:	685b      	ldreq	r3, [r3, #4]
 8000ed8:	6063      	str	r3, [r4, #4]
 8000eda:	bf04      	itt	eq
 8000edc:	1949      	addeq	r1, r1, r5
 8000ede:	6021      	streq	r1, [r4, #0]
 8000ee0:	6054      	str	r4, [r2, #4]
 8000ee2:	e7ca      	b.n	8000e7a <_free_r+0x26>
 8000ee4:	b003      	add	sp, #12
 8000ee6:	bd30      	pop	{r4, r5, pc}
 8000ee8:	200000ac 	.word	0x200000ac

08000eec <sbrk_aligned>:
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	4e0e      	ldr	r6, [pc, #56]	; (8000f28 <sbrk_aligned+0x3c>)
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	6831      	ldr	r1, [r6, #0]
 8000ef4:	4605      	mov	r5, r0
 8000ef6:	b911      	cbnz	r1, 8000efe <sbrk_aligned+0x12>
 8000ef8:	f000 fb7a 	bl	80015f0 <_sbrk_r>
 8000efc:	6030      	str	r0, [r6, #0]
 8000efe:	4621      	mov	r1, r4
 8000f00:	4628      	mov	r0, r5
 8000f02:	f000 fb75 	bl	80015f0 <_sbrk_r>
 8000f06:	1c43      	adds	r3, r0, #1
 8000f08:	d00a      	beq.n	8000f20 <sbrk_aligned+0x34>
 8000f0a:	1cc4      	adds	r4, r0, #3
 8000f0c:	f024 0403 	bic.w	r4, r4, #3
 8000f10:	42a0      	cmp	r0, r4
 8000f12:	d007      	beq.n	8000f24 <sbrk_aligned+0x38>
 8000f14:	1a21      	subs	r1, r4, r0
 8000f16:	4628      	mov	r0, r5
 8000f18:	f000 fb6a 	bl	80015f0 <_sbrk_r>
 8000f1c:	3001      	adds	r0, #1
 8000f1e:	d101      	bne.n	8000f24 <sbrk_aligned+0x38>
 8000f20:	f04f 34ff 	mov.w	r4, #4294967295
 8000f24:	4620      	mov	r0, r4
 8000f26:	bd70      	pop	{r4, r5, r6, pc}
 8000f28:	200000b0 	.word	0x200000b0

08000f2c <_malloc_r>:
 8000f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f30:	1ccd      	adds	r5, r1, #3
 8000f32:	f025 0503 	bic.w	r5, r5, #3
 8000f36:	3508      	adds	r5, #8
 8000f38:	2d0c      	cmp	r5, #12
 8000f3a:	bf38      	it	cc
 8000f3c:	250c      	movcc	r5, #12
 8000f3e:	2d00      	cmp	r5, #0
 8000f40:	4607      	mov	r7, r0
 8000f42:	db01      	blt.n	8000f48 <_malloc_r+0x1c>
 8000f44:	42a9      	cmp	r1, r5
 8000f46:	d905      	bls.n	8000f54 <_malloc_r+0x28>
 8000f48:	230c      	movs	r3, #12
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	2600      	movs	r6, #0
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f54:	4e2e      	ldr	r6, [pc, #184]	; (8001010 <_malloc_r+0xe4>)
 8000f56:	f000 fbf5 	bl	8001744 <__malloc_lock>
 8000f5a:	6833      	ldr	r3, [r6, #0]
 8000f5c:	461c      	mov	r4, r3
 8000f5e:	bb34      	cbnz	r4, 8000fae <_malloc_r+0x82>
 8000f60:	4629      	mov	r1, r5
 8000f62:	4638      	mov	r0, r7
 8000f64:	f7ff ffc2 	bl	8000eec <sbrk_aligned>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	d14d      	bne.n	800100a <_malloc_r+0xde>
 8000f6e:	6834      	ldr	r4, [r6, #0]
 8000f70:	4626      	mov	r6, r4
 8000f72:	2e00      	cmp	r6, #0
 8000f74:	d140      	bne.n	8000ff8 <_malloc_r+0xcc>
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	4631      	mov	r1, r6
 8000f7a:	4638      	mov	r0, r7
 8000f7c:	eb04 0803 	add.w	r8, r4, r3
 8000f80:	f000 fb36 	bl	80015f0 <_sbrk_r>
 8000f84:	4580      	cmp	r8, r0
 8000f86:	d13a      	bne.n	8000ffe <_malloc_r+0xd2>
 8000f88:	6821      	ldr	r1, [r4, #0]
 8000f8a:	3503      	adds	r5, #3
 8000f8c:	1a6d      	subs	r5, r5, r1
 8000f8e:	f025 0503 	bic.w	r5, r5, #3
 8000f92:	3508      	adds	r5, #8
 8000f94:	2d0c      	cmp	r5, #12
 8000f96:	bf38      	it	cc
 8000f98:	250c      	movcc	r5, #12
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	f7ff ffa5 	bl	8000eec <sbrk_aligned>
 8000fa2:	3001      	adds	r0, #1
 8000fa4:	d02b      	beq.n	8000ffe <_malloc_r+0xd2>
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	442b      	add	r3, r5
 8000faa:	6023      	str	r3, [r4, #0]
 8000fac:	e00e      	b.n	8000fcc <_malloc_r+0xa0>
 8000fae:	6822      	ldr	r2, [r4, #0]
 8000fb0:	1b52      	subs	r2, r2, r5
 8000fb2:	d41e      	bmi.n	8000ff2 <_malloc_r+0xc6>
 8000fb4:	2a0b      	cmp	r2, #11
 8000fb6:	d916      	bls.n	8000fe6 <_malloc_r+0xba>
 8000fb8:	1961      	adds	r1, r4, r5
 8000fba:	42a3      	cmp	r3, r4
 8000fbc:	6025      	str	r5, [r4, #0]
 8000fbe:	bf18      	it	ne
 8000fc0:	6059      	strne	r1, [r3, #4]
 8000fc2:	6863      	ldr	r3, [r4, #4]
 8000fc4:	bf08      	it	eq
 8000fc6:	6031      	streq	r1, [r6, #0]
 8000fc8:	5162      	str	r2, [r4, r5]
 8000fca:	604b      	str	r3, [r1, #4]
 8000fcc:	4638      	mov	r0, r7
 8000fce:	f104 060b 	add.w	r6, r4, #11
 8000fd2:	f000 fbbd 	bl	8001750 <__malloc_unlock>
 8000fd6:	f026 0607 	bic.w	r6, r6, #7
 8000fda:	1d23      	adds	r3, r4, #4
 8000fdc:	1af2      	subs	r2, r6, r3
 8000fde:	d0b6      	beq.n	8000f4e <_malloc_r+0x22>
 8000fe0:	1b9b      	subs	r3, r3, r6
 8000fe2:	50a3      	str	r3, [r4, r2]
 8000fe4:	e7b3      	b.n	8000f4e <_malloc_r+0x22>
 8000fe6:	6862      	ldr	r2, [r4, #4]
 8000fe8:	42a3      	cmp	r3, r4
 8000fea:	bf0c      	ite	eq
 8000fec:	6032      	streq	r2, [r6, #0]
 8000fee:	605a      	strne	r2, [r3, #4]
 8000ff0:	e7ec      	b.n	8000fcc <_malloc_r+0xa0>
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	6864      	ldr	r4, [r4, #4]
 8000ff6:	e7b2      	b.n	8000f5e <_malloc_r+0x32>
 8000ff8:	4634      	mov	r4, r6
 8000ffa:	6876      	ldr	r6, [r6, #4]
 8000ffc:	e7b9      	b.n	8000f72 <_malloc_r+0x46>
 8000ffe:	230c      	movs	r3, #12
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4638      	mov	r0, r7
 8001004:	f000 fba4 	bl	8001750 <__malloc_unlock>
 8001008:	e7a1      	b.n	8000f4e <_malloc_r+0x22>
 800100a:	6025      	str	r5, [r4, #0]
 800100c:	e7de      	b.n	8000fcc <_malloc_r+0xa0>
 800100e:	bf00      	nop
 8001010:	200000ac 	.word	0x200000ac

08001014 <__sfputc_r>:
 8001014:	6893      	ldr	r3, [r2, #8]
 8001016:	3b01      	subs	r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	b410      	push	{r4}
 800101c:	6093      	str	r3, [r2, #8]
 800101e:	da08      	bge.n	8001032 <__sfputc_r+0x1e>
 8001020:	6994      	ldr	r4, [r2, #24]
 8001022:	42a3      	cmp	r3, r4
 8001024:	db01      	blt.n	800102a <__sfputc_r+0x16>
 8001026:	290a      	cmp	r1, #10
 8001028:	d103      	bne.n	8001032 <__sfputc_r+0x1e>
 800102a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800102e:	f7ff bc31 	b.w	8000894 <__swbuf_r>
 8001032:	6813      	ldr	r3, [r2, #0]
 8001034:	1c58      	adds	r0, r3, #1
 8001036:	6010      	str	r0, [r2, #0]
 8001038:	7019      	strb	r1, [r3, #0]
 800103a:	4608      	mov	r0, r1
 800103c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001040:	4770      	bx	lr

08001042 <__sfputs_r>:
 8001042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001044:	4606      	mov	r6, r0
 8001046:	460f      	mov	r7, r1
 8001048:	4614      	mov	r4, r2
 800104a:	18d5      	adds	r5, r2, r3
 800104c:	42ac      	cmp	r4, r5
 800104e:	d101      	bne.n	8001054 <__sfputs_r+0x12>
 8001050:	2000      	movs	r0, #0
 8001052:	e007      	b.n	8001064 <__sfputs_r+0x22>
 8001054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001058:	463a      	mov	r2, r7
 800105a:	4630      	mov	r0, r6
 800105c:	f7ff ffda 	bl	8001014 <__sfputc_r>
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	d1f3      	bne.n	800104c <__sfputs_r+0xa>
 8001064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001068 <_vfiprintf_r>:
 8001068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800106c:	460d      	mov	r5, r1
 800106e:	b09d      	sub	sp, #116	; 0x74
 8001070:	4614      	mov	r4, r2
 8001072:	4698      	mov	r8, r3
 8001074:	4606      	mov	r6, r0
 8001076:	b118      	cbz	r0, 8001080 <_vfiprintf_r+0x18>
 8001078:	6983      	ldr	r3, [r0, #24]
 800107a:	b90b      	cbnz	r3, 8001080 <_vfiprintf_r+0x18>
 800107c:	f7ff fde4 	bl	8000c48 <__sinit>
 8001080:	4b89      	ldr	r3, [pc, #548]	; (80012a8 <_vfiprintf_r+0x240>)
 8001082:	429d      	cmp	r5, r3
 8001084:	d11b      	bne.n	80010be <_vfiprintf_r+0x56>
 8001086:	6875      	ldr	r5, [r6, #4]
 8001088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800108a:	07d9      	lsls	r1, r3, #31
 800108c:	d405      	bmi.n	800109a <_vfiprintf_r+0x32>
 800108e:	89ab      	ldrh	r3, [r5, #12]
 8001090:	059a      	lsls	r2, r3, #22
 8001092:	d402      	bmi.n	800109a <_vfiprintf_r+0x32>
 8001094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001096:	f7ff fe75 	bl	8000d84 <__retarget_lock_acquire_recursive>
 800109a:	89ab      	ldrh	r3, [r5, #12]
 800109c:	071b      	lsls	r3, r3, #28
 800109e:	d501      	bpl.n	80010a4 <_vfiprintf_r+0x3c>
 80010a0:	692b      	ldr	r3, [r5, #16]
 80010a2:	b9eb      	cbnz	r3, 80010e0 <_vfiprintf_r+0x78>
 80010a4:	4629      	mov	r1, r5
 80010a6:	4630      	mov	r0, r6
 80010a8:	f7ff fc46 	bl	8000938 <__swsetup_r>
 80010ac:	b1c0      	cbz	r0, 80010e0 <_vfiprintf_r+0x78>
 80010ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010b0:	07dc      	lsls	r4, r3, #31
 80010b2:	d50e      	bpl.n	80010d2 <_vfiprintf_r+0x6a>
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	b01d      	add	sp, #116	; 0x74
 80010ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010be:	4b7b      	ldr	r3, [pc, #492]	; (80012ac <_vfiprintf_r+0x244>)
 80010c0:	429d      	cmp	r5, r3
 80010c2:	d101      	bne.n	80010c8 <_vfiprintf_r+0x60>
 80010c4:	68b5      	ldr	r5, [r6, #8]
 80010c6:	e7df      	b.n	8001088 <_vfiprintf_r+0x20>
 80010c8:	4b79      	ldr	r3, [pc, #484]	; (80012b0 <_vfiprintf_r+0x248>)
 80010ca:	429d      	cmp	r5, r3
 80010cc:	bf08      	it	eq
 80010ce:	68f5      	ldreq	r5, [r6, #12]
 80010d0:	e7da      	b.n	8001088 <_vfiprintf_r+0x20>
 80010d2:	89ab      	ldrh	r3, [r5, #12]
 80010d4:	0598      	lsls	r0, r3, #22
 80010d6:	d4ed      	bmi.n	80010b4 <_vfiprintf_r+0x4c>
 80010d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010da:	f7ff fe54 	bl	8000d86 <__retarget_lock_release_recursive>
 80010de:	e7e9      	b.n	80010b4 <_vfiprintf_r+0x4c>
 80010e0:	2300      	movs	r3, #0
 80010e2:	9309      	str	r3, [sp, #36]	; 0x24
 80010e4:	2320      	movs	r3, #32
 80010e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80010ee:	2330      	movs	r3, #48	; 0x30
 80010f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80012b4 <_vfiprintf_r+0x24c>
 80010f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80010f8:	f04f 0901 	mov.w	r9, #1
 80010fc:	4623      	mov	r3, r4
 80010fe:	469a      	mov	sl, r3
 8001100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001104:	b10a      	cbz	r2, 800110a <_vfiprintf_r+0xa2>
 8001106:	2a25      	cmp	r2, #37	; 0x25
 8001108:	d1f9      	bne.n	80010fe <_vfiprintf_r+0x96>
 800110a:	ebba 0b04 	subs.w	fp, sl, r4
 800110e:	d00b      	beq.n	8001128 <_vfiprintf_r+0xc0>
 8001110:	465b      	mov	r3, fp
 8001112:	4622      	mov	r2, r4
 8001114:	4629      	mov	r1, r5
 8001116:	4630      	mov	r0, r6
 8001118:	f7ff ff93 	bl	8001042 <__sfputs_r>
 800111c:	3001      	adds	r0, #1
 800111e:	f000 80aa 	beq.w	8001276 <_vfiprintf_r+0x20e>
 8001122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001124:	445a      	add	r2, fp
 8001126:	9209      	str	r2, [sp, #36]	; 0x24
 8001128:	f89a 3000 	ldrb.w	r3, [sl]
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80a2 	beq.w	8001276 <_vfiprintf_r+0x20e>
 8001132:	2300      	movs	r3, #0
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800113c:	f10a 0a01 	add.w	sl, sl, #1
 8001140:	9304      	str	r3, [sp, #16]
 8001142:	9307      	str	r3, [sp, #28]
 8001144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001148:	931a      	str	r3, [sp, #104]	; 0x68
 800114a:	4654      	mov	r4, sl
 800114c:	2205      	movs	r2, #5
 800114e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001152:	4858      	ldr	r0, [pc, #352]	; (80012b4 <_vfiprintf_r+0x24c>)
 8001154:	f7ff f84c 	bl	80001f0 <memchr>
 8001158:	9a04      	ldr	r2, [sp, #16]
 800115a:	b9d8      	cbnz	r0, 8001194 <_vfiprintf_r+0x12c>
 800115c:	06d1      	lsls	r1, r2, #27
 800115e:	bf44      	itt	mi
 8001160:	2320      	movmi	r3, #32
 8001162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001166:	0713      	lsls	r3, r2, #28
 8001168:	bf44      	itt	mi
 800116a:	232b      	movmi	r3, #43	; 0x2b
 800116c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001170:	f89a 3000 	ldrb.w	r3, [sl]
 8001174:	2b2a      	cmp	r3, #42	; 0x2a
 8001176:	d015      	beq.n	80011a4 <_vfiprintf_r+0x13c>
 8001178:	9a07      	ldr	r2, [sp, #28]
 800117a:	4654      	mov	r4, sl
 800117c:	2000      	movs	r0, #0
 800117e:	f04f 0c0a 	mov.w	ip, #10
 8001182:	4621      	mov	r1, r4
 8001184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001188:	3b30      	subs	r3, #48	; 0x30
 800118a:	2b09      	cmp	r3, #9
 800118c:	d94e      	bls.n	800122c <_vfiprintf_r+0x1c4>
 800118e:	b1b0      	cbz	r0, 80011be <_vfiprintf_r+0x156>
 8001190:	9207      	str	r2, [sp, #28]
 8001192:	e014      	b.n	80011be <_vfiprintf_r+0x156>
 8001194:	eba0 0308 	sub.w	r3, r0, r8
 8001198:	fa09 f303 	lsl.w	r3, r9, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	9304      	str	r3, [sp, #16]
 80011a0:	46a2      	mov	sl, r4
 80011a2:	e7d2      	b.n	800114a <_vfiprintf_r+0xe2>
 80011a4:	9b03      	ldr	r3, [sp, #12]
 80011a6:	1d19      	adds	r1, r3, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	9103      	str	r1, [sp, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bfbb      	ittet	lt
 80011b0:	425b      	neglt	r3, r3
 80011b2:	f042 0202 	orrlt.w	r2, r2, #2
 80011b6:	9307      	strge	r3, [sp, #28]
 80011b8:	9307      	strlt	r3, [sp, #28]
 80011ba:	bfb8      	it	lt
 80011bc:	9204      	strlt	r2, [sp, #16]
 80011be:	7823      	ldrb	r3, [r4, #0]
 80011c0:	2b2e      	cmp	r3, #46	; 0x2e
 80011c2:	d10c      	bne.n	80011de <_vfiprintf_r+0x176>
 80011c4:	7863      	ldrb	r3, [r4, #1]
 80011c6:	2b2a      	cmp	r3, #42	; 0x2a
 80011c8:	d135      	bne.n	8001236 <_vfiprintf_r+0x1ce>
 80011ca:	9b03      	ldr	r3, [sp, #12]
 80011cc:	1d1a      	adds	r2, r3, #4
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	9203      	str	r2, [sp, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bfb8      	it	lt
 80011d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80011da:	3402      	adds	r4, #2
 80011dc:	9305      	str	r3, [sp, #20]
 80011de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80012c4 <_vfiprintf_r+0x25c>
 80011e2:	7821      	ldrb	r1, [r4, #0]
 80011e4:	2203      	movs	r2, #3
 80011e6:	4650      	mov	r0, sl
 80011e8:	f7ff f802 	bl	80001f0 <memchr>
 80011ec:	b140      	cbz	r0, 8001200 <_vfiprintf_r+0x198>
 80011ee:	2340      	movs	r3, #64	; 0x40
 80011f0:	eba0 000a 	sub.w	r0, r0, sl
 80011f4:	fa03 f000 	lsl.w	r0, r3, r0
 80011f8:	9b04      	ldr	r3, [sp, #16]
 80011fa:	4303      	orrs	r3, r0
 80011fc:	3401      	adds	r4, #1
 80011fe:	9304      	str	r3, [sp, #16]
 8001200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001204:	482c      	ldr	r0, [pc, #176]	; (80012b8 <_vfiprintf_r+0x250>)
 8001206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800120a:	2206      	movs	r2, #6
 800120c:	f7fe fff0 	bl	80001f0 <memchr>
 8001210:	2800      	cmp	r0, #0
 8001212:	d03f      	beq.n	8001294 <_vfiprintf_r+0x22c>
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <_vfiprintf_r+0x254>)
 8001216:	bb1b      	cbnz	r3, 8001260 <_vfiprintf_r+0x1f8>
 8001218:	9b03      	ldr	r3, [sp, #12]
 800121a:	3307      	adds	r3, #7
 800121c:	f023 0307 	bic.w	r3, r3, #7
 8001220:	3308      	adds	r3, #8
 8001222:	9303      	str	r3, [sp, #12]
 8001224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001226:	443b      	add	r3, r7
 8001228:	9309      	str	r3, [sp, #36]	; 0x24
 800122a:	e767      	b.n	80010fc <_vfiprintf_r+0x94>
 800122c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001230:	460c      	mov	r4, r1
 8001232:	2001      	movs	r0, #1
 8001234:	e7a5      	b.n	8001182 <_vfiprintf_r+0x11a>
 8001236:	2300      	movs	r3, #0
 8001238:	3401      	adds	r4, #1
 800123a:	9305      	str	r3, [sp, #20]
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 0c0a 	mov.w	ip, #10
 8001242:	4620      	mov	r0, r4
 8001244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001248:	3a30      	subs	r2, #48	; 0x30
 800124a:	2a09      	cmp	r2, #9
 800124c:	d903      	bls.n	8001256 <_vfiprintf_r+0x1ee>
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0c5      	beq.n	80011de <_vfiprintf_r+0x176>
 8001252:	9105      	str	r1, [sp, #20]
 8001254:	e7c3      	b.n	80011de <_vfiprintf_r+0x176>
 8001256:	fb0c 2101 	mla	r1, ip, r1, r2
 800125a:	4604      	mov	r4, r0
 800125c:	2301      	movs	r3, #1
 800125e:	e7f0      	b.n	8001242 <_vfiprintf_r+0x1da>
 8001260:	ab03      	add	r3, sp, #12
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	462a      	mov	r2, r5
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <_vfiprintf_r+0x258>)
 8001268:	a904      	add	r1, sp, #16
 800126a:	4630      	mov	r0, r6
 800126c:	f3af 8000 	nop.w
 8001270:	4607      	mov	r7, r0
 8001272:	1c78      	adds	r0, r7, #1
 8001274:	d1d6      	bne.n	8001224 <_vfiprintf_r+0x1bc>
 8001276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001278:	07d9      	lsls	r1, r3, #31
 800127a:	d405      	bmi.n	8001288 <_vfiprintf_r+0x220>
 800127c:	89ab      	ldrh	r3, [r5, #12]
 800127e:	059a      	lsls	r2, r3, #22
 8001280:	d402      	bmi.n	8001288 <_vfiprintf_r+0x220>
 8001282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001284:	f7ff fd7f 	bl	8000d86 <__retarget_lock_release_recursive>
 8001288:	89ab      	ldrh	r3, [r5, #12]
 800128a:	065b      	lsls	r3, r3, #25
 800128c:	f53f af12 	bmi.w	80010b4 <_vfiprintf_r+0x4c>
 8001290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001292:	e711      	b.n	80010b8 <_vfiprintf_r+0x50>
 8001294:	ab03      	add	r3, sp, #12
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	462a      	mov	r2, r5
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <_vfiprintf_r+0x258>)
 800129c:	a904      	add	r1, sp, #16
 800129e:	4630      	mov	r0, r6
 80012a0:	f000 f880 	bl	80013a4 <_printf_i>
 80012a4:	e7e4      	b.n	8001270 <_vfiprintf_r+0x208>
 80012a6:	bf00      	nop
 80012a8:	08001868 	.word	0x08001868
 80012ac:	08001888 	.word	0x08001888
 80012b0:	08001848 	.word	0x08001848
 80012b4:	080018a8 	.word	0x080018a8
 80012b8:	080018b2 	.word	0x080018b2
 80012bc:	00000000 	.word	0x00000000
 80012c0:	08001043 	.word	0x08001043
 80012c4:	080018ae 	.word	0x080018ae

080012c8 <_printf_common>:
 80012c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012cc:	4616      	mov	r6, r2
 80012ce:	4699      	mov	r9, r3
 80012d0:	688a      	ldr	r2, [r1, #8]
 80012d2:	690b      	ldr	r3, [r1, #16]
 80012d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012d8:	4293      	cmp	r3, r2
 80012da:	bfb8      	it	lt
 80012dc:	4613      	movlt	r3, r2
 80012de:	6033      	str	r3, [r6, #0]
 80012e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012e4:	4607      	mov	r7, r0
 80012e6:	460c      	mov	r4, r1
 80012e8:	b10a      	cbz	r2, 80012ee <_printf_common+0x26>
 80012ea:	3301      	adds	r3, #1
 80012ec:	6033      	str	r3, [r6, #0]
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	0699      	lsls	r1, r3, #26
 80012f2:	bf42      	ittt	mi
 80012f4:	6833      	ldrmi	r3, [r6, #0]
 80012f6:	3302      	addmi	r3, #2
 80012f8:	6033      	strmi	r3, [r6, #0]
 80012fa:	6825      	ldr	r5, [r4, #0]
 80012fc:	f015 0506 	ands.w	r5, r5, #6
 8001300:	d106      	bne.n	8001310 <_printf_common+0x48>
 8001302:	f104 0a19 	add.w	sl, r4, #25
 8001306:	68e3      	ldr	r3, [r4, #12]
 8001308:	6832      	ldr	r2, [r6, #0]
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	42ab      	cmp	r3, r5
 800130e:	dc26      	bgt.n	800135e <_printf_common+0x96>
 8001310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001314:	1e13      	subs	r3, r2, #0
 8001316:	6822      	ldr	r2, [r4, #0]
 8001318:	bf18      	it	ne
 800131a:	2301      	movne	r3, #1
 800131c:	0692      	lsls	r2, r2, #26
 800131e:	d42b      	bmi.n	8001378 <_printf_common+0xb0>
 8001320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001324:	4649      	mov	r1, r9
 8001326:	4638      	mov	r0, r7
 8001328:	47c0      	blx	r8
 800132a:	3001      	adds	r0, #1
 800132c:	d01e      	beq.n	800136c <_printf_common+0xa4>
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	68e5      	ldr	r5, [r4, #12]
 8001332:	6832      	ldr	r2, [r6, #0]
 8001334:	f003 0306 	and.w	r3, r3, #6
 8001338:	2b04      	cmp	r3, #4
 800133a:	bf08      	it	eq
 800133c:	1aad      	subeq	r5, r5, r2
 800133e:	68a3      	ldr	r3, [r4, #8]
 8001340:	6922      	ldr	r2, [r4, #16]
 8001342:	bf0c      	ite	eq
 8001344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001348:	2500      	movne	r5, #0
 800134a:	4293      	cmp	r3, r2
 800134c:	bfc4      	itt	gt
 800134e:	1a9b      	subgt	r3, r3, r2
 8001350:	18ed      	addgt	r5, r5, r3
 8001352:	2600      	movs	r6, #0
 8001354:	341a      	adds	r4, #26
 8001356:	42b5      	cmp	r5, r6
 8001358:	d11a      	bne.n	8001390 <_printf_common+0xc8>
 800135a:	2000      	movs	r0, #0
 800135c:	e008      	b.n	8001370 <_printf_common+0xa8>
 800135e:	2301      	movs	r3, #1
 8001360:	4652      	mov	r2, sl
 8001362:	4649      	mov	r1, r9
 8001364:	4638      	mov	r0, r7
 8001366:	47c0      	blx	r8
 8001368:	3001      	adds	r0, #1
 800136a:	d103      	bne.n	8001374 <_printf_common+0xac>
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001374:	3501      	adds	r5, #1
 8001376:	e7c6      	b.n	8001306 <_printf_common+0x3e>
 8001378:	18e1      	adds	r1, r4, r3
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	2030      	movs	r0, #48	; 0x30
 800137e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001382:	4422      	add	r2, r4
 8001384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800138c:	3302      	adds	r3, #2
 800138e:	e7c7      	b.n	8001320 <_printf_common+0x58>
 8001390:	2301      	movs	r3, #1
 8001392:	4622      	mov	r2, r4
 8001394:	4649      	mov	r1, r9
 8001396:	4638      	mov	r0, r7
 8001398:	47c0      	blx	r8
 800139a:	3001      	adds	r0, #1
 800139c:	d0e6      	beq.n	800136c <_printf_common+0xa4>
 800139e:	3601      	adds	r6, #1
 80013a0:	e7d9      	b.n	8001356 <_printf_common+0x8e>
	...

080013a4 <_printf_i>:
 80013a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013a8:	7e0f      	ldrb	r7, [r1, #24]
 80013aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80013ac:	2f78      	cmp	r7, #120	; 0x78
 80013ae:	4691      	mov	r9, r2
 80013b0:	4680      	mov	r8, r0
 80013b2:	460c      	mov	r4, r1
 80013b4:	469a      	mov	sl, r3
 80013b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80013ba:	d807      	bhi.n	80013cc <_printf_i+0x28>
 80013bc:	2f62      	cmp	r7, #98	; 0x62
 80013be:	d80a      	bhi.n	80013d6 <_printf_i+0x32>
 80013c0:	2f00      	cmp	r7, #0
 80013c2:	f000 80d8 	beq.w	8001576 <_printf_i+0x1d2>
 80013c6:	2f58      	cmp	r7, #88	; 0x58
 80013c8:	f000 80a3 	beq.w	8001512 <_printf_i+0x16e>
 80013cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80013d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013d4:	e03a      	b.n	800144c <_printf_i+0xa8>
 80013d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013da:	2b15      	cmp	r3, #21
 80013dc:	d8f6      	bhi.n	80013cc <_printf_i+0x28>
 80013de:	a101      	add	r1, pc, #4	; (adr r1, 80013e4 <_printf_i+0x40>)
 80013e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013e4:	0800143d 	.word	0x0800143d
 80013e8:	08001451 	.word	0x08001451
 80013ec:	080013cd 	.word	0x080013cd
 80013f0:	080013cd 	.word	0x080013cd
 80013f4:	080013cd 	.word	0x080013cd
 80013f8:	080013cd 	.word	0x080013cd
 80013fc:	08001451 	.word	0x08001451
 8001400:	080013cd 	.word	0x080013cd
 8001404:	080013cd 	.word	0x080013cd
 8001408:	080013cd 	.word	0x080013cd
 800140c:	080013cd 	.word	0x080013cd
 8001410:	0800155d 	.word	0x0800155d
 8001414:	08001481 	.word	0x08001481
 8001418:	0800153f 	.word	0x0800153f
 800141c:	080013cd 	.word	0x080013cd
 8001420:	080013cd 	.word	0x080013cd
 8001424:	0800157f 	.word	0x0800157f
 8001428:	080013cd 	.word	0x080013cd
 800142c:	08001481 	.word	0x08001481
 8001430:	080013cd 	.word	0x080013cd
 8001434:	080013cd 	.word	0x080013cd
 8001438:	08001547 	.word	0x08001547
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	1d1a      	adds	r2, r3, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	602a      	str	r2, [r5, #0]
 8001444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800144c:	2301      	movs	r3, #1
 800144e:	e0a3      	b.n	8001598 <_printf_i+0x1f4>
 8001450:	6820      	ldr	r0, [r4, #0]
 8001452:	6829      	ldr	r1, [r5, #0]
 8001454:	0606      	lsls	r6, r0, #24
 8001456:	f101 0304 	add.w	r3, r1, #4
 800145a:	d50a      	bpl.n	8001472 <_printf_i+0xce>
 800145c:	680e      	ldr	r6, [r1, #0]
 800145e:	602b      	str	r3, [r5, #0]
 8001460:	2e00      	cmp	r6, #0
 8001462:	da03      	bge.n	800146c <_printf_i+0xc8>
 8001464:	232d      	movs	r3, #45	; 0x2d
 8001466:	4276      	negs	r6, r6
 8001468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800146c:	485e      	ldr	r0, [pc, #376]	; (80015e8 <_printf_i+0x244>)
 800146e:	230a      	movs	r3, #10
 8001470:	e019      	b.n	80014a6 <_printf_i+0x102>
 8001472:	680e      	ldr	r6, [r1, #0]
 8001474:	602b      	str	r3, [r5, #0]
 8001476:	f010 0f40 	tst.w	r0, #64	; 0x40
 800147a:	bf18      	it	ne
 800147c:	b236      	sxthne	r6, r6
 800147e:	e7ef      	b.n	8001460 <_printf_i+0xbc>
 8001480:	682b      	ldr	r3, [r5, #0]
 8001482:	6820      	ldr	r0, [r4, #0]
 8001484:	1d19      	adds	r1, r3, #4
 8001486:	6029      	str	r1, [r5, #0]
 8001488:	0601      	lsls	r1, r0, #24
 800148a:	d501      	bpl.n	8001490 <_printf_i+0xec>
 800148c:	681e      	ldr	r6, [r3, #0]
 800148e:	e002      	b.n	8001496 <_printf_i+0xf2>
 8001490:	0646      	lsls	r6, r0, #25
 8001492:	d5fb      	bpl.n	800148c <_printf_i+0xe8>
 8001494:	881e      	ldrh	r6, [r3, #0]
 8001496:	4854      	ldr	r0, [pc, #336]	; (80015e8 <_printf_i+0x244>)
 8001498:	2f6f      	cmp	r7, #111	; 0x6f
 800149a:	bf0c      	ite	eq
 800149c:	2308      	moveq	r3, #8
 800149e:	230a      	movne	r3, #10
 80014a0:	2100      	movs	r1, #0
 80014a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80014a6:	6865      	ldr	r5, [r4, #4]
 80014a8:	60a5      	str	r5, [r4, #8]
 80014aa:	2d00      	cmp	r5, #0
 80014ac:	bfa2      	ittt	ge
 80014ae:	6821      	ldrge	r1, [r4, #0]
 80014b0:	f021 0104 	bicge.w	r1, r1, #4
 80014b4:	6021      	strge	r1, [r4, #0]
 80014b6:	b90e      	cbnz	r6, 80014bc <_printf_i+0x118>
 80014b8:	2d00      	cmp	r5, #0
 80014ba:	d04d      	beq.n	8001558 <_printf_i+0x1b4>
 80014bc:	4615      	mov	r5, r2
 80014be:	fbb6 f1f3 	udiv	r1, r6, r3
 80014c2:	fb03 6711 	mls	r7, r3, r1, r6
 80014c6:	5dc7      	ldrb	r7, [r0, r7]
 80014c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80014cc:	4637      	mov	r7, r6
 80014ce:	42bb      	cmp	r3, r7
 80014d0:	460e      	mov	r6, r1
 80014d2:	d9f4      	bls.n	80014be <_printf_i+0x11a>
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d10b      	bne.n	80014f0 <_printf_i+0x14c>
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	07de      	lsls	r6, r3, #31
 80014dc:	d508      	bpl.n	80014f0 <_printf_i+0x14c>
 80014de:	6923      	ldr	r3, [r4, #16]
 80014e0:	6861      	ldr	r1, [r4, #4]
 80014e2:	4299      	cmp	r1, r3
 80014e4:	bfde      	ittt	le
 80014e6:	2330      	movle	r3, #48	; 0x30
 80014e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80014ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80014f0:	1b52      	subs	r2, r2, r5
 80014f2:	6122      	str	r2, [r4, #16]
 80014f4:	f8cd a000 	str.w	sl, [sp]
 80014f8:	464b      	mov	r3, r9
 80014fa:	aa03      	add	r2, sp, #12
 80014fc:	4621      	mov	r1, r4
 80014fe:	4640      	mov	r0, r8
 8001500:	f7ff fee2 	bl	80012c8 <_printf_common>
 8001504:	3001      	adds	r0, #1
 8001506:	d14c      	bne.n	80015a2 <_printf_i+0x1fe>
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	b004      	add	sp, #16
 800150e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001512:	4835      	ldr	r0, [pc, #212]	; (80015e8 <_printf_i+0x244>)
 8001514:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001518:	6829      	ldr	r1, [r5, #0]
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001520:	6029      	str	r1, [r5, #0]
 8001522:	061d      	lsls	r5, r3, #24
 8001524:	d514      	bpl.n	8001550 <_printf_i+0x1ac>
 8001526:	07df      	lsls	r7, r3, #31
 8001528:	bf44      	itt	mi
 800152a:	f043 0320 	orrmi.w	r3, r3, #32
 800152e:	6023      	strmi	r3, [r4, #0]
 8001530:	b91e      	cbnz	r6, 800153a <_printf_i+0x196>
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	f023 0320 	bic.w	r3, r3, #32
 8001538:	6023      	str	r3, [r4, #0]
 800153a:	2310      	movs	r3, #16
 800153c:	e7b0      	b.n	80014a0 <_printf_i+0xfc>
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	f043 0320 	orr.w	r3, r3, #32
 8001544:	6023      	str	r3, [r4, #0]
 8001546:	2378      	movs	r3, #120	; 0x78
 8001548:	4828      	ldr	r0, [pc, #160]	; (80015ec <_printf_i+0x248>)
 800154a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800154e:	e7e3      	b.n	8001518 <_printf_i+0x174>
 8001550:	0659      	lsls	r1, r3, #25
 8001552:	bf48      	it	mi
 8001554:	b2b6      	uxthmi	r6, r6
 8001556:	e7e6      	b.n	8001526 <_printf_i+0x182>
 8001558:	4615      	mov	r5, r2
 800155a:	e7bb      	b.n	80014d4 <_printf_i+0x130>
 800155c:	682b      	ldr	r3, [r5, #0]
 800155e:	6826      	ldr	r6, [r4, #0]
 8001560:	6961      	ldr	r1, [r4, #20]
 8001562:	1d18      	adds	r0, r3, #4
 8001564:	6028      	str	r0, [r5, #0]
 8001566:	0635      	lsls	r5, r6, #24
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	d501      	bpl.n	8001570 <_printf_i+0x1cc>
 800156c:	6019      	str	r1, [r3, #0]
 800156e:	e002      	b.n	8001576 <_printf_i+0x1d2>
 8001570:	0670      	lsls	r0, r6, #25
 8001572:	d5fb      	bpl.n	800156c <_printf_i+0x1c8>
 8001574:	8019      	strh	r1, [r3, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	6123      	str	r3, [r4, #16]
 800157a:	4615      	mov	r5, r2
 800157c:	e7ba      	b.n	80014f4 <_printf_i+0x150>
 800157e:	682b      	ldr	r3, [r5, #0]
 8001580:	1d1a      	adds	r2, r3, #4
 8001582:	602a      	str	r2, [r5, #0]
 8001584:	681d      	ldr	r5, [r3, #0]
 8001586:	6862      	ldr	r2, [r4, #4]
 8001588:	2100      	movs	r1, #0
 800158a:	4628      	mov	r0, r5
 800158c:	f7fe fe30 	bl	80001f0 <memchr>
 8001590:	b108      	cbz	r0, 8001596 <_printf_i+0x1f2>
 8001592:	1b40      	subs	r0, r0, r5
 8001594:	6060      	str	r0, [r4, #4]
 8001596:	6863      	ldr	r3, [r4, #4]
 8001598:	6123      	str	r3, [r4, #16]
 800159a:	2300      	movs	r3, #0
 800159c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015a0:	e7a8      	b.n	80014f4 <_printf_i+0x150>
 80015a2:	6923      	ldr	r3, [r4, #16]
 80015a4:	462a      	mov	r2, r5
 80015a6:	4649      	mov	r1, r9
 80015a8:	4640      	mov	r0, r8
 80015aa:	47d0      	blx	sl
 80015ac:	3001      	adds	r0, #1
 80015ae:	d0ab      	beq.n	8001508 <_printf_i+0x164>
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	079b      	lsls	r3, r3, #30
 80015b4:	d413      	bmi.n	80015de <_printf_i+0x23a>
 80015b6:	68e0      	ldr	r0, [r4, #12]
 80015b8:	9b03      	ldr	r3, [sp, #12]
 80015ba:	4298      	cmp	r0, r3
 80015bc:	bfb8      	it	lt
 80015be:	4618      	movlt	r0, r3
 80015c0:	e7a4      	b.n	800150c <_printf_i+0x168>
 80015c2:	2301      	movs	r3, #1
 80015c4:	4632      	mov	r2, r6
 80015c6:	4649      	mov	r1, r9
 80015c8:	4640      	mov	r0, r8
 80015ca:	47d0      	blx	sl
 80015cc:	3001      	adds	r0, #1
 80015ce:	d09b      	beq.n	8001508 <_printf_i+0x164>
 80015d0:	3501      	adds	r5, #1
 80015d2:	68e3      	ldr	r3, [r4, #12]
 80015d4:	9903      	ldr	r1, [sp, #12]
 80015d6:	1a5b      	subs	r3, r3, r1
 80015d8:	42ab      	cmp	r3, r5
 80015da:	dcf2      	bgt.n	80015c2 <_printf_i+0x21e>
 80015dc:	e7eb      	b.n	80015b6 <_printf_i+0x212>
 80015de:	2500      	movs	r5, #0
 80015e0:	f104 0619 	add.w	r6, r4, #25
 80015e4:	e7f5      	b.n	80015d2 <_printf_i+0x22e>
 80015e6:	bf00      	nop
 80015e8:	080018b9 	.word	0x080018b9
 80015ec:	080018ca 	.word	0x080018ca

080015f0 <_sbrk_r>:
 80015f0:	b538      	push	{r3, r4, r5, lr}
 80015f2:	4d06      	ldr	r5, [pc, #24]	; (800160c <_sbrk_r+0x1c>)
 80015f4:	2300      	movs	r3, #0
 80015f6:	4604      	mov	r4, r0
 80015f8:	4608      	mov	r0, r1
 80015fa:	602b      	str	r3, [r5, #0]
 80015fc:	f7ff f82a 	bl	8000654 <_sbrk>
 8001600:	1c43      	adds	r3, r0, #1
 8001602:	d102      	bne.n	800160a <_sbrk_r+0x1a>
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	b103      	cbz	r3, 800160a <_sbrk_r+0x1a>
 8001608:	6023      	str	r3, [r4, #0]
 800160a:	bd38      	pop	{r3, r4, r5, pc}
 800160c:	200000b4 	.word	0x200000b4

08001610 <__sread>:
 8001610:	b510      	push	{r4, lr}
 8001612:	460c      	mov	r4, r1
 8001614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001618:	f000 f8a0 	bl	800175c <_read_r>
 800161c:	2800      	cmp	r0, #0
 800161e:	bfab      	itete	ge
 8001620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001622:	89a3      	ldrhlt	r3, [r4, #12]
 8001624:	181b      	addge	r3, r3, r0
 8001626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800162a:	bfac      	ite	ge
 800162c:	6563      	strge	r3, [r4, #84]	; 0x54
 800162e:	81a3      	strhlt	r3, [r4, #12]
 8001630:	bd10      	pop	{r4, pc}

08001632 <__swrite>:
 8001632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001636:	461f      	mov	r7, r3
 8001638:	898b      	ldrh	r3, [r1, #12]
 800163a:	05db      	lsls	r3, r3, #23
 800163c:	4605      	mov	r5, r0
 800163e:	460c      	mov	r4, r1
 8001640:	4616      	mov	r6, r2
 8001642:	d505      	bpl.n	8001650 <__swrite+0x1e>
 8001644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001648:	2302      	movs	r3, #2
 800164a:	2200      	movs	r2, #0
 800164c:	f000 f868 	bl	8001720 <_lseek_r>
 8001650:	89a3      	ldrh	r3, [r4, #12]
 8001652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800165a:	81a3      	strh	r3, [r4, #12]
 800165c:	4632      	mov	r2, r6
 800165e:	463b      	mov	r3, r7
 8001660:	4628      	mov	r0, r5
 8001662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001666:	f000 b817 	b.w	8001698 <_write_r>

0800166a <__sseek>:
 800166a:	b510      	push	{r4, lr}
 800166c:	460c      	mov	r4, r1
 800166e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001672:	f000 f855 	bl	8001720 <_lseek_r>
 8001676:	1c43      	adds	r3, r0, #1
 8001678:	89a3      	ldrh	r3, [r4, #12]
 800167a:	bf15      	itete	ne
 800167c:	6560      	strne	r0, [r4, #84]	; 0x54
 800167e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001686:	81a3      	strheq	r3, [r4, #12]
 8001688:	bf18      	it	ne
 800168a:	81a3      	strhne	r3, [r4, #12]
 800168c:	bd10      	pop	{r4, pc}

0800168e <__sclose>:
 800168e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001692:	f000 b813 	b.w	80016bc <_close_r>
	...

08001698 <_write_r>:
 8001698:	b538      	push	{r3, r4, r5, lr}
 800169a:	4d07      	ldr	r5, [pc, #28]	; (80016b8 <_write_r+0x20>)
 800169c:	4604      	mov	r4, r0
 800169e:	4608      	mov	r0, r1
 80016a0:	4611      	mov	r1, r2
 80016a2:	2200      	movs	r2, #0
 80016a4:	602a      	str	r2, [r5, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	f7fe ff83 	bl	80005b2 <_write>
 80016ac:	1c43      	adds	r3, r0, #1
 80016ae:	d102      	bne.n	80016b6 <_write_r+0x1e>
 80016b0:	682b      	ldr	r3, [r5, #0]
 80016b2:	b103      	cbz	r3, 80016b6 <_write_r+0x1e>
 80016b4:	6023      	str	r3, [r4, #0]
 80016b6:	bd38      	pop	{r3, r4, r5, pc}
 80016b8:	200000b4 	.word	0x200000b4

080016bc <_close_r>:
 80016bc:	b538      	push	{r3, r4, r5, lr}
 80016be:	4d06      	ldr	r5, [pc, #24]	; (80016d8 <_close_r+0x1c>)
 80016c0:	2300      	movs	r3, #0
 80016c2:	4604      	mov	r4, r0
 80016c4:	4608      	mov	r0, r1
 80016c6:	602b      	str	r3, [r5, #0]
 80016c8:	f7fe ff8f 	bl	80005ea <_close>
 80016cc:	1c43      	adds	r3, r0, #1
 80016ce:	d102      	bne.n	80016d6 <_close_r+0x1a>
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	b103      	cbz	r3, 80016d6 <_close_r+0x1a>
 80016d4:	6023      	str	r3, [r4, #0]
 80016d6:	bd38      	pop	{r3, r4, r5, pc}
 80016d8:	200000b4 	.word	0x200000b4

080016dc <_fstat_r>:
 80016dc:	b538      	push	{r3, r4, r5, lr}
 80016de:	4d07      	ldr	r5, [pc, #28]	; (80016fc <_fstat_r+0x20>)
 80016e0:	2300      	movs	r3, #0
 80016e2:	4604      	mov	r4, r0
 80016e4:	4608      	mov	r0, r1
 80016e6:	4611      	mov	r1, r2
 80016e8:	602b      	str	r3, [r5, #0]
 80016ea:	f7fe ff8a 	bl	8000602 <_fstat>
 80016ee:	1c43      	adds	r3, r0, #1
 80016f0:	d102      	bne.n	80016f8 <_fstat_r+0x1c>
 80016f2:	682b      	ldr	r3, [r5, #0]
 80016f4:	b103      	cbz	r3, 80016f8 <_fstat_r+0x1c>
 80016f6:	6023      	str	r3, [r4, #0]
 80016f8:	bd38      	pop	{r3, r4, r5, pc}
 80016fa:	bf00      	nop
 80016fc:	200000b4 	.word	0x200000b4

08001700 <_isatty_r>:
 8001700:	b538      	push	{r3, r4, r5, lr}
 8001702:	4d06      	ldr	r5, [pc, #24]	; (800171c <_isatty_r+0x1c>)
 8001704:	2300      	movs	r3, #0
 8001706:	4604      	mov	r4, r0
 8001708:	4608      	mov	r0, r1
 800170a:	602b      	str	r3, [r5, #0]
 800170c:	f7fe ff89 	bl	8000622 <_isatty>
 8001710:	1c43      	adds	r3, r0, #1
 8001712:	d102      	bne.n	800171a <_isatty_r+0x1a>
 8001714:	682b      	ldr	r3, [r5, #0]
 8001716:	b103      	cbz	r3, 800171a <_isatty_r+0x1a>
 8001718:	6023      	str	r3, [r4, #0]
 800171a:	bd38      	pop	{r3, r4, r5, pc}
 800171c:	200000b4 	.word	0x200000b4

08001720 <_lseek_r>:
 8001720:	b538      	push	{r3, r4, r5, lr}
 8001722:	4d07      	ldr	r5, [pc, #28]	; (8001740 <_lseek_r+0x20>)
 8001724:	4604      	mov	r4, r0
 8001726:	4608      	mov	r0, r1
 8001728:	4611      	mov	r1, r2
 800172a:	2200      	movs	r2, #0
 800172c:	602a      	str	r2, [r5, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	f7fe ff82 	bl	8000638 <_lseek>
 8001734:	1c43      	adds	r3, r0, #1
 8001736:	d102      	bne.n	800173e <_lseek_r+0x1e>
 8001738:	682b      	ldr	r3, [r5, #0]
 800173a:	b103      	cbz	r3, 800173e <_lseek_r+0x1e>
 800173c:	6023      	str	r3, [r4, #0]
 800173e:	bd38      	pop	{r3, r4, r5, pc}
 8001740:	200000b4 	.word	0x200000b4

08001744 <__malloc_lock>:
 8001744:	4801      	ldr	r0, [pc, #4]	; (800174c <__malloc_lock+0x8>)
 8001746:	f7ff bb1d 	b.w	8000d84 <__retarget_lock_acquire_recursive>
 800174a:	bf00      	nop
 800174c:	200000a8 	.word	0x200000a8

08001750 <__malloc_unlock>:
 8001750:	4801      	ldr	r0, [pc, #4]	; (8001758 <__malloc_unlock+0x8>)
 8001752:	f7ff bb18 	b.w	8000d86 <__retarget_lock_release_recursive>
 8001756:	bf00      	nop
 8001758:	200000a8 	.word	0x200000a8

0800175c <_read_r>:
 800175c:	b538      	push	{r3, r4, r5, lr}
 800175e:	4d07      	ldr	r5, [pc, #28]	; (800177c <_read_r+0x20>)
 8001760:	4604      	mov	r4, r0
 8001762:	4608      	mov	r0, r1
 8001764:	4611      	mov	r1, r2
 8001766:	2200      	movs	r2, #0
 8001768:	602a      	str	r2, [r5, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	f7fe ff04 	bl	8000578 <_read>
 8001770:	1c43      	adds	r3, r0, #1
 8001772:	d102      	bne.n	800177a <_read_r+0x1e>
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	b103      	cbz	r3, 800177a <_read_r+0x1e>
 8001778:	6023      	str	r3, [r4, #0]
 800177a:	bd38      	pop	{r3, r4, r5, pc}
 800177c:	200000b4 	.word	0x200000b4

08001780 <_init>:
 8001780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001782:	bf00      	nop
 8001784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001786:	bc08      	pop	{r3}
 8001788:	469e      	mov	lr, r3
 800178a:	4770      	bx	lr

0800178c <_fini>:
 800178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800178e:	bf00      	nop
 8001790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001792:	bc08      	pop	{r3}
 8001794:	469e      	mov	lr, r3
 8001796:	4770      	bx	lr
